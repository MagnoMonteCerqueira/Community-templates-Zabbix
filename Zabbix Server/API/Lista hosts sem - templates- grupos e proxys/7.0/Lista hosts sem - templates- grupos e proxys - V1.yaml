zabbix_export:
  version: '7.0'
  template_groups:
    - uuid: a571c0d144b14fd4a87a9d9b2aa9fcd6
      name: Templates/Applications
  templates:
    - uuid: a7add9e7ab944760b036d93cdacfb6db
      template: 'Lista hosts sem - templates- grupos e proxys - V1'
      name: 'Lista hosts sem - templates- grupos e proxys - V1'
      description: |
        Template: Lista hosts sem - templates, grupos e proxys - V1
        
        Este template é um script JavaScript que conecta à API JSON-RPC do Zabbix para listar hosts ativos que estão sem vinculação a templates, sem associação a grupos e sem proxy atribuído. Ele realiza as seguintes funções:
        
        Recebe parâmetros de configuração (endpoint da API, usuário, senha e hosts para ignorar).
        
        Realiza autenticação na API do Zabbix, obtendo token de acesso.
        
        Busca todas as interfaces de hosts para mapear seus IPs ou nomes DNS.
        
        Busca todos os hosts cadastrados e filtra somente os que estão ativos (status = 0).
        
        Verifica para cada host se ele não possui template vinculado, se está sem proxy, ou se não está associado a grupo algum.
        
        Considera somente hosts que possuem IP ou DNS válido associado.
        
        Ignora hosts listados explicitamente no parâmetro ignore_hosts.
        
        Retorna um JSON organizado em três listas:
        
        hosts_sem_templates: hosts sem templates vinculados.
        
        hosts_sem_proxy: hosts sem proxy atribuído.
        
        hosts_sem_grupos: hosts sem grupos associados.
        
        Também retorna contagens totais para cada uma dessas categorias.
        
        O resultado é um relatório detalhado dos hosts ativos que precisam de correções ou associações para um gerenciamento eficiente na plataforma Zabbix.
        
        Analista: Magno M Cerqueira
        Data: 06/08/2025
      groups:
        - name: Templates/Applications
      items:
        - uuid: 1bf1cdb1b06641aa89ea36c203f5f646
          name: 'get list hosts'
          type: SCRIPT
          key: zbx.get.list.hosts
          delay: '{$ZBX.INTERVAL.TIME}'
          history: '{$ZBX.HISTORY}'
          value_type: TEXT
          trends: '0'
          params: |
            var ZabbixAPI = {
              params: {}, // objeto para armazenar parâmetros passados (endpoint, user, password, etc)
              authToken: '', // token de autenticação gerado após login
            
              // Função para configurar parâmetros obrigatórios
              setParams: function (params) {
                ['api_endpoint', 'user', 'password'].forEach(function (field) {
                  if (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {
                    throw 'Required param is not set: ' + field + '.';
                  }
                });
            
                if (typeof params.ignore_hosts === 'string' && params.ignore_hosts.trim() !== '') {
                  params.ignore_hosts_array = params.ignore_hosts.split('|').map(function (h) { return h.trim(); });
                } else {
                  params.ignore_hosts_array = [];
                }
            
                ZabbixAPI.params = params;
                if (!ZabbixAPI.params.api_endpoint.endsWith('/')) {
                  ZabbixAPI.params.api_endpoint += '/';
                }
              },
            
              // Função para autenticar e obter token
              login: function () {
                var req = new HttpRequest();
                req.addHeader('Content-Type: application/json-rpc');
            
                var payload = JSON.stringify({
                  jsonrpc: '2.0',
                  method: 'user.login',
                  params: {
                    username: ZabbixAPI.params.user,
                    password: ZabbixAPI.params.password
                  },
                  id: 1,
                  auth: null
                });
            
                var response = req.post(ZabbixAPI.params.api_endpoint + 'api_jsonrpc.php', payload);
                if (req.getStatus() !== 200 || response === null) {
                  throw 'Login failed with status code ' + req.getStatus() + ': ' + response;
                }
            
                var json = JSON.parse(response);
                if (!json.result) {
                  throw 'Auth token not returned from Zabbix API.';
                }
            
                ZabbixAPI.authToken = json.result;
              },
            
              // Função genérica para chamadas na API Zabbix
              request: function (method, paramsObj) {
                var req = new HttpRequest();
                req.addHeader('Content-Type: application/json-rpc');
            
                var payload = JSON.stringify({
                  jsonrpc: '2.0',
                  method: method,
                  params: paramsObj,
                  id: 1,
                  auth: ZabbixAPI.authToken
                });
            
                var response = req.post(ZabbixAPI.params.api_endpoint + 'api_jsonrpc.php', payload);
            
                if (req.getStatus() !== 200 || response === null) {
                  throw 'Request failed with status code ' + req.getStatus() + ': ' + response;
                }
            
                var json;
                try {
                  json = JSON.parse(response);
                } catch (e) {
                  throw 'Failed to parse response from API.';
                }
            
                if (json.error) {
                  throw 'API error: ' + JSON.stringify(json.error);
                }
            
                return json.result;
              },
            
              // Obtem IPs ou DNS das interfaces dos hosts
              getHostIPs: function () {
                var interfaces = ZabbixAPI.request('hostinterface.get', {
                  output: ['hostid', 'ip', 'dns', 'useip']
                });
            
                var ipMap = {};
            
                interfaces.forEach(function (iface) {
                  var hostId = iface.hostid;
            
                  if ((iface.useip === "1" || iface.useip === 1) && iface.ip) {
                    ipMap[hostId] = iface.ip;
                  } else if ((iface.useip === "0" || iface.useip === 0) && iface.dns) {
                    ipMap[hostId] = iface.dns;
                  }
                });
            
                return ipMap;
              },
            
              // Coleta e organiza dados dos hosts conforme filtros e regras
              getMetricsData: function () {
                var data = {
                  hosts_sem_templates: [],
                  hosts_sem_proxy: [],
                  hosts_sem_grupos: []
                };
            
                var allHosts = ZabbixAPI.request('host.get', {
                  output: ['hostid', 'host', 'proxy_hostid', 'proxyid', 'status'],
                  selectGroups: ['groupid', 'name'],
                  selectParentTemplates: ['templateid', 'name']
                });
            
                var ipMap = ZabbixAPI.getHostIPs();
            
                allHosts.forEach(function (host) {
                  if (host.status !== "0") return; // só hosts ativos
            
                  // Obtém IP ou DNS, ou define "(sem dados)" se não existir
                  var ipOrDns = "(sem dados)";
                  if (ipMap.hasOwnProperty(host.hostid)) {
                    var val = ipMap[host.hostid];
                    if (val && val.trim() !== '') {
                      ipOrDns = val;
                    }
                  }
            
                  // Hosts sem template vinculado
                  if (!host.parentTemplates || host.parentTemplates.length === 0) {
                    data.hosts_sem_templates.push({
                      hostid: host.hostid,
                      host: host.host,
                      ip: ipOrDns
                    });
                  }
            
                  // Hosts sem proxy
                  if (
                    (
                      !host.hasOwnProperty('proxy_hostid') ||
                      host.proxy_hostid === null ||
                      host.proxy_hostid === undefined ||
                      host.proxy_hostid === '0' ||
                      host.proxy_hostid === 0
                    ) &&
                    (host.proxyid === "0" || host.proxyid === 0)
                  ) {
                    if (ZabbixAPI.params.ignore_hosts_array.indexOf(host.host) === -1) {
                      data.hosts_sem_proxy.push({
                        hostid: host.hostid,
                        host: host.host,
                        ip: ipOrDns
                      });
                    }
                  }
            
                  // Hosts sem grupos
                  if (!host.groups || host.groups.length === 0) {
                    data.hosts_sem_grupos.push({
                      hostid: host.hostid,
                      host: host.host,
                      ip: ipOrDns
                    });
                  }
                });
            
                return {
                  hosts: data,
                  counts: [{
                    total_hosts_sem_templates: data.hosts_sem_templates.length,
                    total_hosts_sem_proxy: data.hosts_sem_proxy.length,
                    total_hosts_sem_grupos: data.hosts_sem_grupos.length
                  }]
                };
              }
            };
            
            try {
              ZabbixAPI.setParams(JSON.parse(value));
              ZabbixAPI.login();
              return JSON.stringify({ lista_hosts: ZabbixAPI.getMetricsData() });
            } catch (error) {
              error += (String(error).endsWith('.')) ? '' : '.';
              Zabbix.log(3, '[ ZABBIX ] ERROR: ' + error);
              return JSON.stringify({ 'error': error });
            }
          description: |
            Descrição:
            Este item realiza uma chamada à API do Zabbix para obter a lista de hosts cadastrados no sistema. Os dados retornados podem incluir informações como ID do host, nome, grupo, status de monitoramento, associação a proxies e vinculação com templates. Este item é utilizado para fins de inventário dinâmico, integração com dashboards ou validações automatizadas de ambiente.
          parameters:
            - name: api_endpoint
              value: '{$ZBX.API.ENDPOINT}'
            - name: ignore_hosts
              value: '{$ZBX.API.IGNORE.HOSTS}'
            - name: password
              value: '{$ZBX.API.PASSWORD}'
            - name: user
              value: '{$ZBX.API.USERNAME}'
          tags:
            - tag: component
              value: raw
      discovery_rules:
        - uuid: f45f8042a0264f2689a7920b0636bbe3
          name: 'Discovery counts hosts'
          type: DEPENDENT
          key: zbx.discovery.list.counts.hosts.get
          delay: '0'
          description: |
            Discovery counts hosts
            Contagem total de hosts descobertos — representa o número total de hosts que foram detectados (descobertos) pelo processo de discovery no ambiente de monitoramento.
          item_prototypes:
            - uuid: 873e7613d7584770bfda647c03090d87
              name: '{#TOTALNAME}'
              type: DEPENDENT
              key: 'count["{#TOTALNAME}"]'
              delay: '0'
              description: |
                Descrição do item {#TOTALNAME}
                Este item retorna o número total de hosts cadastrados no Zabbix que estão na categoria {#GROUPNAME}. Essa métrica é útil para identificar hosts que precisam de atenção, pois a condição {#GROUPNAME} pode impactar o monitoramento efetivo do ambiente.
                
                Utilização:
                Verificar hosts que estejam {#GROUPNAME}..
                
                Ajudar na manutenção e organização do ambiente monitorado.
                
                Servir como base para relatórios e dashboards (ex: Grafana) que destacam possíveis falhas na configuração.
                
                Origem:
                Este dado é extraído via API do Zabbix, utilizando o método host.get com filtros específicos para retornar hosts que estejam {#GROUPNAME}.
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.lista_hosts.counts[:].{#TOTALNAME}.first()'
              master_item:
                key: zbx.get.list.hosts
              tags:
                - tag: component
                  value: total
                - tag: count
                  value: '{#GROUPNAME}'
          master_item:
            key: zbx.get.list.hosts
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var json = JSON.parse(value);
                  
                  var counts = json.lista_hosts.counts[0];
                  
                  // Objeto para mapear as descrições dos grupos
                  var descricoes = {
                    total_hosts_sem_templates: "sem templates",
                    total_hosts_sem_proxy: "sem proxy",
                    total_hosts_sem_grupos: "sem grupos"
                  };
                  
                  var output = Object.keys(counts).map(function(key) {
                    return {
                      "{#TOTALNAME}": key,
                      "{#GROUPNAME}": descricoes[key] || key
                    };
                  });
                  
                  return JSON.stringify({ "data": output });
                  
        - uuid: 803bab8fc1d146e2ba0f072b3a20437f
          name: 'Discovery  hosts sem grupos'
          type: DEPENDENT
          key: zbx.discovery.list.hosts.sem.g.get
          delay: '0'
          enabled_lifetime_type: DISABLE_AFTER
          enabled_lifetime: 1h
          description: |
            Discovery hosts sem grupos
            Hosts descobertos sem grupos atribuídos — lista ou quantidade de hosts que foram descobertos, mas que ainda não pertencem a nenhum grupo dentro do sistema Zabbix. Esses hosts podem estar isolados e sem categorização.
          item_prototypes:
            - uuid: d0892c966008495ab8711b50016a6e0d
              name: 'Host: {#HOSTNAME}'
              type: DEPENDENT
              key: 'zbx.host.sem.g["{#HOSTID}"]'
              delay: '0'
              valuemap:
                name: 'Status hosts'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.lista_hosts.hosts.hosts_sem_grupos[?(@.hostid==''{#HOSTID}'')].hostid.first()'
              master_item:
                key: zbx.get.list.hosts
              tags:
                - tag: component
                  value: 'sem grupo'
              trigger_prototypes:
                - uuid: 5d9ce4b42fab4667ae8d125fed3ebb94
                  expression: 'last(/Lista hosts sem - templates- grupos e proxys - V1/zbx.host.sem.g["{#HOSTID}"],#2)<>0'
                  name: 'O host "{#HOSTNAME}" esta sem grupo associado'
                  priority: WARNING
                  description: |
                    Descrição do Alerta: Abertura de Chamado Técnico – Equipe Nível 03 (Servidores)
                    Horário de atendimento: Segunda a sexta, das 08h às 19h.
                    
                    Passo a Passo para Tratamento do Alerta:
                    
                    1. Abertura de Chamado:
                    Verifique se o alerta ocorreu dentro do horário de atendimento (08h às 19h).
                    Caso positivo, abra imediatamente um chamado para a Equipe Técnica Nível 03 – Servidores.
                    
                    2. Detalhamento do Alerta no Chamado:
                    Descreva claramente o alerta recebido, incluindo:
                    
                    Descrição do alerta: O host "{#HOSTNAME}" esta {#GROUPNAME} associado
                    Nome do host afetado: {#HOSTNAME}
                    ID do host: {#HOSTID}
                    IP: {#HOSTIP}
                    Severidade: {$ZBX.SEVERITY.WARN}
                    
                    3. Acompanhamento:
                    Acompanhe o chamado com a equipe técnica até o encerramento do incidente.
                    Atualize o status no sistema de monitoramento conforme a evolução do caso.
                    Certifique-se de que a causa raiz foi registrada (quando aplicável) e o serviço está normalizado antes de fechar o chamado.
                    
                    Fora do expediente (após 19h e antes das 08h):
                    Registrar o alerta recebido no sistema de chamados com:
                    
                    Descrição do alerta: O host "{#HOSTNAME}" esta {#GROUPNAME} associado
                    Nome do host afetado: {#HOSTNAME}
                    ID do host: {#HOSTID}
                    IP: {#HOSTIP}
                    Severidade: {$ZBX.SEVERITY.WARN}
                    
                    Marcar o chamado como "Aguardando horário comercial" para tratativa da equipe técnica Nível 03.
                    
                    Notificar a equipe técnica assim que iniciar o expediente ou conforme definido nos procedimentos de escalonamento.
          master_item:
            key: zbx.get.list.hosts
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var json = JSON.parse(value);
                  
                  var hostsSemGrupos = json.lista_hosts.hosts.hosts_sem_grupos;
                  
                  var output = hostsSemGrupos.map(function(host) {
                    return {
                      "{#HOSTID}": host.hostid,
                      "{#HOSTNAME}": host.host,
                       "{#HOSTIP}": host.ip,
                      "{#GROUPNAME}": "sem grupo"
                    };
                  });
                  
                  return JSON.stringify({ "data": output });
                  
        - uuid: bf30b84e3d8b42c78e686d2e83450c0d
          name: 'Discovery  hosts sem proxy'
          type: DEPENDENT
          key: zbx.discovery.list.hosts.sem.p.get
          delay: '0'
          enabled_lifetime_type: DISABLE_AFTER
          enabled_lifetime: 1h
          description: |
            Discovery hosts sem proxy
            Hosts descobertos sem proxy atribuído — hosts que foram detectados, porém não estão associados a nenhum proxy de monitoramento. Um proxy é usado para coletar dados em redes remotas ou segmentadas.
          item_prototypes:
            - uuid: ac1b08c4d88a442c9f76243b0eeee11d
              name: 'Host: {#HOSTNAME}'
              type: DEPENDENT
              key: 'zbx.host.sem.p["{#HOSTID}"]'
              delay: '0'
              units: '!ID'
              description: |
                Descrição do host: {#HOSTNAME}
                
                O host {#HOSTNAME} apresenta o possível problema {#GROUPNAME} associado:
                ele foi encontrado via regra de descoberta e inserido no grupo {#GROUPNAME} para tratativas.
                
                Após a resolução do caso {#GROUPNAME}, o host {#HOSTNAME} entrará no status 0,
                e sua trigger mudará o status de "problema" para "resolvido",
                aguardando 1 hora para sair deste grupo de forma automatica.
              valuemap:
                name: 'Status hosts'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.lista_hosts.hosts.hosts_sem_proxy[?(@.hostid==''{#HOSTID}'')].hostid.first()'
                  error_handler: CUSTOM_VALUE
                  error_handler_params: '0'
              master_item:
                key: zbx.get.list.hosts
              tags:
                - tag: component
                  value: 'sem proxy'
              trigger_prototypes:
                - uuid: 1bd2a3d2eefe4286a0814285307e9284
                  expression: 'last(/Lista hosts sem - templates- grupos e proxys - V1/zbx.host.sem.p["{#HOSTID}"],#3)<>0'
                  name: 'O host "{#HOSTNAME}" esta sem proxy associado'
                  priority: HIGH
                  description: |
                    Descrição do Alerta: Abertura de Chamado Técnico – Equipe Nível 03 (Servidores)
                    Horário de atendimento: Segunda a sexta, das 08h às 19h.
                    
                    Passo a Passo para Tratamento do Alerta:
                    
                    1. Abertura de Chamado:
                    Verifique se o alerta ocorreu dentro do horário de atendimento (08h às 19h).
                    Caso positivo, abra imediatamente um chamado para a Equipe Técnica Nível 03 – Servidores.
                    
                    2. Detalhamento do Alerta no Chamado:
                    Descreva claramente o alerta recebido, incluindo:
                    
                    Descrição do alerta: O host "{#HOSTNAME}" esta {#GROUPNAME} associado
                    Nome do host afetado: {#HOSTNAME}
                    ID do host: {#HOSTID}
                    IP: {#HOSTIP}
                    Severidade: {$ZBX.SEVERITY.HIGH}
                    
                    3. Acompanhamento:
                    Acompanhe o chamado com a equipe técnica até o encerramento do incidente.
                    Atualize o status no sistema de monitoramento conforme a evolução do caso.
                    Certifique-se de que a causa raiz foi registrada (quando aplicável) e o serviço está normalizado antes de fechar o chamado.
                    
                    Fora do expediente (após 19h e antes das 08h):
                    Registrar o alerta recebido no sistema de chamados com:
                    
                    Descrição do alerta: O host "{#HOSTNAME}" esta {#GROUPNAME} associado
                    Nome do host afetado: {#HOSTNAME}
                    ID do host: {#HOSTID}
                    IP: {#HOSTIP}
                    Severidade: {$ZBX.SEVERITY.HIGH}
                    
                    Marcar o chamado como "Aguardando horário comercial" para tratativa da equipe técnica Nível 03.
                    
                    Notificar a equipe técnica assim que iniciar o expediente ou conforme definido nos procedimentos de escalonamento.
          master_item:
            key: zbx.get.list.hosts
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  var json = JSON.parse(value);
                  
                  var hostsSemProxy = json.lista_hosts.hosts.hosts_sem_proxy;
                  
                  var output = hostsSemProxy.map(function(host) {
                    return {
                      "{#HOSTID}": host.hostid,
                      "{#HOSTNAME}": host.host,
                       "{#HOSTIP}": host.ip,
                      "{#GROUPNAME}": "sem grupo"
                    };
                  });
                  
                  return JSON.stringify({ "data": output });
                  
        - uuid: 1e43db60af0a42899bf3b8e840397555
          name: 'Discovery hosts sem templates'
          type: DEPENDENT
          key: zbx.discovery.list.hosts.sem.t.get
          delay: '0'
          enabled_lifetime_type: DISABLE_AFTER
          enabled_lifetime: 1h
          description: |
            Discovery hosts sem templates
            Hosts descobertos sem templates vinculados — hosts que foram descobertos mas que não têm templates (modelos de monitoramento com itens e triggers) aplicados. Sem templates, esses hosts não serão monitorados efetivamente.
          item_prototypes:
            - uuid: 668ec5e6b23d4578a7112b39d5b719b9
              name: 'Host: {#HOSTNAME}'
              type: DEPENDENT
              key: 'zbx.host.sem.t["{#HOSTID}"]'
              delay: '0'
              units: '!ID'
              valuemap:
                name: 'Status hosts'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.lista_hosts.hosts.hosts_sem_templates[?(@.hostid==''{#HOSTID}'')].hostid.first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: zbx.get.list.hosts
              tags:
                - tag: component
                  value: 'sem template'
              trigger_prototypes:
                - uuid: dfa87232c0a14c25b7dbaf243f406ebf
                  expression: 'last(/Lista hosts sem - templates- grupos e proxys - V1/zbx.host.sem.t["{#HOSTID}"],#3)<>0'
                  name: 'O host "{#HOSTNAME}" está sem template associado'
                  priority: DISASTER
                  description: |
                    Descrição do Alerta: Abertura de Chamado Técnico – Equipe Nível 03 (Servidores)
                    Horário de atendimento: Segunda a sexta, das 08h às 19h.
                    
                    Passo a Passo para Tratamento do Alerta:
                    
                    1. Abertura de Chamado:
                    Verifique se o alerta ocorreu dentro do horário de atendimento (08h às 19h).
                    Caso positivo, abra imediatamente um chamado para a Equipe Técnica Nível 03 – Servidores.
                    
                    2. Detalhamento do Alerta no Chamado:
                    Descreva claramente o alerta recebido, incluindo:
                    
                    Descrição do alerta: O host "{#HOSTNAME}" esta {#GROUPNAME} associado
                    Nome do host afetado: {#HOSTNAME}
                    ID do host: {#HOSTID}
                    IP: {#HOSTIP}
                    Severidade: {$ZBX.SEVERITY.DISASTER}
                    
                    3. Acompanhamento:
                    Acompanhe o chamado com a equipe técnica até o encerramento do incidente.
                    Atualize o status no sistema de monitoramento conforme a evolução do caso.
                    Certifique-se de que a causa raiz foi registrada (quando aplicável) e o serviço está normalizado antes de fechar o chamado.
                    
                    Fora do expediente (após 19h e antes das 08h):
                    Registrar o alerta recebido no sistema de chamados com:
                    
                    Descrição do alerta: O host "{#HOSTNAME}" esta {#GROUPNAME} associado
                    Nome do host afetado: {#HOSTNAME}
                    ID do host: {#HOSTID}
                    IP: {#HOSTIP}
                    Severidade: {$ZBX.SEVERITY.DISASTER}
                    
                    Marcar o chamado como "Aguardando horário comercial" para tratativa da equipe técnica Nível 03.
                    
                    Notificar a equipe técnica assim que iniciar o expediente ou conforme definido nos procedimentos de escalonamento.
          master_item:
            key: zbx.get.list.hosts
          preprocessing:
            - type: JAVASCRIPT
              parameters:
                - |
                  // Parse o JSON
                  var json = JSON.parse(value);
                  
                  // Extrai o array hosts_sem_templates
                  var hostsSemTemplates = json.lista_hosts.hosts.hosts_sem_templates;
                  
                  // Mapeia para o formato LLD esperado
                  var output = hostsSemTemplates.map(function(host) {
                    return {
                      "{#HOSTID}": host.hostid,
                      "{#HOSTNAME}": host.host,
                      "{#HOSTIP}": host.ip,
                      "{#GROUPNAME}": "sem template"
                    };
                  });
                  
                  // Retorna string JSON com array dentro da chave "data"
                  return JSON.stringify({ "data": output });
                  
      macros:
        - macro: '{$ZBX.API.ENDPOINT}'
          value: 'http://192.168.1.36/zabbix/'
          description: 'URL do endpoint da API do Zabbix.Exemplo: http://seu-zabbix-servidor/zabbix'
        - macro: '{$ZBX.API.IGNORE.HOSTS}'
          value: 'Zabbix list|Zabbix lis2'
          description: 'Lista de hosts que devem ser ignorados nas consultas API, geralmente separados por pipe (|). Exemplo: host1|host2|host3'
        - macro: '{$ZBX.API.PASSWORD}'
          value: zabbix
          description: 'Senha do usuário para autenticação na API do Zabbix.'
        - macro: '{$ZBX.API.USERNAME}'
          value: Admin
          description: 'Nome do usuário para autenticação na API do Zabbix.'
        - macro: '{$ZBX.HISTORY}'
          value: 0d
          description: 'Intervalo de tempo ou quantidade de histórico para consulta de dados de métricas ou eventos.'
        - macro: '{$ZBX.INTERVAL.TIME}'
          value: 1m
          description: 'Intervalo de atualização ou polling para a execução do script ou coleta dos dados'
        - macro: '{$ZBX.SEVERITY.AVERAGE}'
          value: 'Médio (Average)'
          description: 'Problema de gravidade média.'
        - macro: '{$ZBX.SEVERITY.DISASTER}'
          value: 'Desastre (Disaster)'
          description: 'Problema crítico, requer ação imediata.'
        - macro: '{$ZBX.SEVERITY.HIGH}'
          value: 'Alto (High)'
          description: 'Problema grave que pode impactar serviços.'
        - macro: '{$ZBX.SEVERITY.WARN}'
          value: 'Aviso (Warning)'
          description: 'Evento importante, atenção recomendada.'
      valuemaps:
        - uuid: bf62e7b43aad4e42837ce343e6e32306
          name: 'Status hosts'
          mappings:
            - value: '0'
              newvalue: Resolvido
