{
    "zabbix_export": {
        "version": "7.0",
        "template_groups": [
            {
                "uuid": "a571c0d144b14fd4a87a9d9b2aa9fcd6",
                "name": "Templates/Applications"
            }
        ],
        "templates": [
            {
                "uuid": "a7add9e7ab944760b036d93cdacfb6db",
                "template": "Lista hosts sem - templates- grupos e proxys - V1",
                "name": "Lista hosts sem - templates- grupos e proxys - V1",
                "description": "Template: Lista hosts sem - templates, grupos e proxys - V1\n\nEste template \u00e9 um script JavaScript que conecta \u00e0 API JSON-RPC do Zabbix para listar hosts ativos que est\u00e3o sem vincula\u00e7\u00e3o a templates, sem associa\u00e7\u00e3o a grupos e sem proxy atribu\u00eddo. Ele realiza as seguintes fun\u00e7\u00f5es:\n\nRecebe par\u00e2metros de configura\u00e7\u00e3o (endpoint da API, usu\u00e1rio, senha e hosts para ignorar).\n\nRealiza autentica\u00e7\u00e3o na API do Zabbix, obtendo token de acesso.\n\nBusca todas as interfaces de hosts para mapear seus IPs ou nomes DNS.\n\nBusca todos os hosts cadastrados e filtra somente os que est\u00e3o ativos (status = 0).\n\nVerifica para cada host se ele n\u00e3o possui template vinculado, se est\u00e1 sem proxy, ou se n\u00e3o est\u00e1 associado a grupo algum.\n\nConsidera somente hosts que possuem IP ou DNS v\u00e1lido associado.\n\nIgnora hosts listados explicitamente no par\u00e2metro ignore_hosts.\n\nRetorna um JSON organizado em tr\u00eas listas:\n\nhosts_sem_templates: hosts sem templates vinculados.\n\nhosts_sem_proxy: hosts sem proxy atribu\u00eddo.\n\nhosts_sem_grupos: hosts sem grupos associados.\n\nTamb\u00e9m retorna contagens totais para cada uma dessas categorias.\n\nO resultado \u00e9 um relat\u00f3rio detalhado dos hosts ativos que precisam de corre\u00e7\u00f5es ou associa\u00e7\u00f5es para um gerenciamento eficiente na plataforma Zabbix.\n\nAnalista: Magno M Cerqueira\nData: 06/08/2025",
                "groups": [
                    {
                        "name": "Templates/Applications"
                    }
                ],
                "items": [
                    {
                        "uuid": "1bf1cdb1b06641aa89ea36c203f5f646",
                        "name": "get list hosts",
                        "type": "SCRIPT",
                        "key": "zbx.get.list.hosts",
                        "delay": "{$ZBX.INTERVAL.TIME}",
                        "history": "{$ZBX.HISTORY}",
                        "value_type": "TEXT",
                        "trends": "0",
                        "params": "var ZabbixAPI = {\n  params: {}, // objeto para armazenar par\u00e2metros passados (endpoint, user, password, etc)\n  authToken: '', // token de autentica\u00e7\u00e3o gerado ap\u00f3s login\n\n  // Fun\u00e7\u00e3o para configurar par\u00e2metros obrigat\u00f3rios\n  setParams: function (params) {\n    ['api_endpoint', 'user', 'password'].forEach(function (field) {\n      if (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {\n        throw 'Required param is not set: ' + field + '.';\n      }\n    });\n\n    if (typeof params.ignore_hosts === 'string' && params.ignore_hosts.trim() !== '') {\n      params.ignore_hosts_array = params.ignore_hosts.split('|').map(function (h) { return h.trim(); });\n    } else {\n      params.ignore_hosts_array = [];\n    }\n\n    ZabbixAPI.params = params;\n    if (!ZabbixAPI.params.api_endpoint.endsWith('/')) {\n      ZabbixAPI.params.api_endpoint += '/';\n    }\n  },\n\n  // Fun\u00e7\u00e3o para autenticar e obter token\n  login: function () {\n    var req = new HttpRequest();\n    req.addHeader('Content-Type: application/json-rpc');\n\n    var payload = JSON.stringify({\n      jsonrpc: '2.0',\n      method: 'user.login',\n      params: {\n        username: ZabbixAPI.params.user,\n        password: ZabbixAPI.params.password\n      },\n      id: 1,\n      auth: null\n    });\n\n    var response = req.post(ZabbixAPI.params.api_endpoint + 'api_jsonrpc.php', payload);\n    if (req.getStatus() !== 200 || response === null) {\n      throw 'Login failed with status code ' + req.getStatus() + ': ' + response;\n    }\n\n    var json = JSON.parse(response);\n    if (!json.result) {\n      throw 'Auth token not returned from Zabbix API.';\n    }\n\n    ZabbixAPI.authToken = json.result;\n  },\n\n  // Fun\u00e7\u00e3o gen\u00e9rica para chamadas na API Zabbix\n  request: function (method, paramsObj) {\n    var req = new HttpRequest();\n    req.addHeader('Content-Type: application/json-rpc');\n\n    var payload = JSON.stringify({\n      jsonrpc: '2.0',\n      method: method,\n      params: paramsObj,\n      id: 1,\n      auth: ZabbixAPI.authToken\n    });\n\n    var response = req.post(ZabbixAPI.params.api_endpoint + 'api_jsonrpc.php', payload);\n\n    if (req.getStatus() !== 200 || response === null) {\n      throw 'Request failed with status code ' + req.getStatus() + ': ' + response;\n    }\n\n    var json;\n    try {\n      json = JSON.parse(response);\n    } catch (e) {\n      throw 'Failed to parse response from API.';\n    }\n\n    if (json.error) {\n      throw 'API error: ' + JSON.stringify(json.error);\n    }\n\n    return json.result;\n  },\n\n  // Obtem IPs ou DNS das interfaces dos hosts\n  getHostIPs: function () {\n    var interfaces = ZabbixAPI.request('hostinterface.get', {\n      output: ['hostid', 'ip', 'dns', 'useip']\n    });\n\n    var ipMap = {};\n\n    interfaces.forEach(function (iface) {\n      var hostId = iface.hostid;\n\n      if ((iface.useip === \"1\" || iface.useip === 1) && iface.ip) {\n        ipMap[hostId] = iface.ip;\n      } else if ((iface.useip === \"0\" || iface.useip === 0) && iface.dns) {\n        ipMap[hostId] = iface.dns;\n      }\n    });\n\n    return ipMap;\n  },\n\n  // Coleta e organiza dados dos hosts conforme filtros e regras\n  getMetricsData: function () {\n    var data = {\n      hosts_sem_templates: [],\n      hosts_sem_proxy: [],\n      hosts_sem_grupos: []\n    };\n\n    var allHosts = ZabbixAPI.request('host.get', {\n      output: ['hostid', 'host', 'proxy_hostid', 'proxyid', 'status'],\n      selectGroups: ['groupid', 'name'],\n      selectParentTemplates: ['templateid', 'name']\n    });\n\n    var ipMap = ZabbixAPI.getHostIPs();\n\n    allHosts.forEach(function (host) {\n      if (host.status !== \"0\") return; // s\u00f3 hosts ativos\n\n      // Obt\u00e9m IP ou DNS, ou define \"(sem dados)\" se n\u00e3o existir\n      var ipOrDns = \"(sem dados)\";\n      if (ipMap.hasOwnProperty(host.hostid)) {\n        var val = ipMap[host.hostid];\n        if (val && val.trim() !== '') {\n          ipOrDns = val;\n        }\n      }\n\n      // Hosts sem template vinculado\n      if (!host.parentTemplates || host.parentTemplates.length === 0) {\n        data.hosts_sem_templates.push({\n          hostid: host.hostid,\n          host: host.host,\n          ip: ipOrDns\n        });\n      }\n\n      // Hosts sem proxy\n      if (\n        (\n          !host.hasOwnProperty('proxy_hostid') ||\n          host.proxy_hostid === null ||\n          host.proxy_hostid === undefined ||\n          host.proxy_hostid === '0' ||\n          host.proxy_hostid === 0\n        ) &&\n        (host.proxyid === \"0\" || host.proxyid === 0)\n      ) {\n        if (ZabbixAPI.params.ignore_hosts_array.indexOf(host.host) === -1) {\n          data.hosts_sem_proxy.push({\n            hostid: host.hostid,\n            host: host.host,\n            ip: ipOrDns\n          });\n        }\n      }\n\n      // Hosts sem grupos\n      if (!host.groups || host.groups.length === 0) {\n        data.hosts_sem_grupos.push({\n          hostid: host.hostid,\n          host: host.host,\n          ip: ipOrDns\n        });\n      }\n    });\n\n    return {\n      hosts: data,\n      counts: [{\n        total_hosts_sem_templates: data.hosts_sem_templates.length,\n        total_hosts_sem_proxy: data.hosts_sem_proxy.length,\n        total_hosts_sem_grupos: data.hosts_sem_grupos.length\n      }]\n    };\n  }\n};\n\ntry {\n  ZabbixAPI.setParams(JSON.parse(value));\n  ZabbixAPI.login();\n  return JSON.stringify({ lista_hosts: ZabbixAPI.getMetricsData() });\n} catch (error) {\n  error += (String(error).endsWith('.')) ? '' : '.';\n  Zabbix.log(3, '[ ZABBIX ] ERROR: ' + error);\n  return JSON.stringify({ 'error': error });\n}",
                        "description": "Descri\u00e7\u00e3o:\nEste item realiza uma chamada \u00e0 API do Zabbix para obter a lista de hosts cadastrados no sistema. Os dados retornados podem incluir informa\u00e7\u00f5es como ID do host, nome, grupo, status de monitoramento, associa\u00e7\u00e3o a proxies e vincula\u00e7\u00e3o com templates. Este item \u00e9 utilizado para fins de invent\u00e1rio din\u00e2mico, integra\u00e7\u00e3o com dashboards ou valida\u00e7\u00f5es automatizadas de ambiente.",
                        "parameters": [
                            {
                                "name": "api_endpoint",
                                "value": "{$ZBX.API.ENDPOINT}"
                            },
                            {
                                "name": "ignore_hosts",
                                "value": "{$ZBX.API.IGNORE.HOSTS}"
                            },
                            {
                                "name": "password",
                                "value": "{$ZBX.API.PASSWORD}"
                            },
                            {
                                "name": "user",
                                "value": "{$ZBX.API.USERNAME}"
                            }
                        ],
                        "tags": [
                            {
                                "tag": "component",
                                "value": "raw"
                            }
                        ]
                    }
                ],
                "discovery_rules": [
                    {
                        "uuid": "f45f8042a0264f2689a7920b0636bbe3",
                        "name": "Discovery counts hosts",
                        "type": "DEPENDENT",
                        "key": "zbx.discovery.list.counts.hosts.get",
                        "delay": "0",
                        "description": "Discovery counts hosts\nContagem total de hosts descobertos \u2014 representa o n\u00famero total de hosts que foram detectados (descobertos) pelo processo de discovery no ambiente de monitoramento.",
                        "item_prototypes": [
                            {
                                "uuid": "873e7613d7584770bfda647c03090d87",
                                "name": "{#TOTALNAME}",
                                "type": "DEPENDENT",
                                "key": "count[\"{#TOTALNAME}\"]",
                                "delay": "0",
                                "description": "Descri\u00e7\u00e3o do item {#TOTALNAME}\nEste item retorna o n\u00famero total de hosts cadastrados no Zabbix que est\u00e3o na categoria {#GROUPNAME}. Essa m\u00e9trica \u00e9 \u00fatil para identificar hosts que precisam de aten\u00e7\u00e3o, pois a condi\u00e7\u00e3o {#GROUPNAME} pode impactar o monitoramento efetivo do ambiente.\n\nUtiliza\u00e7\u00e3o:\nVerificar hosts que estejam {#GROUPNAME}..\n\nAjudar na manuten\u00e7\u00e3o e organiza\u00e7\u00e3o do ambiente monitorado.\n\nServir como base para relat\u00f3rios e dashboards (ex: Grafana) que destacam poss\u00edveis falhas na configura\u00e7\u00e3o.\n\nOrigem:\nEste dado \u00e9 extra\u00eddo via API do Zabbix, utilizando o m\u00e9todo host.get com filtros espec\u00edficos para retornar hosts que estejam {#GROUPNAME}.",
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.lista_hosts.counts[:].{#TOTALNAME}.first()"
                                        ]
                                    }
                                ],
                                "master_item": {
                                    "key": "zbx.get.list.hosts"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "total"
                                    },
                                    {
                                        "tag": "count",
                                        "value": "{#GROUPNAME}"
                                    }
                                ]
                            }
                        ],
                        "master_item": {
                            "key": "zbx.get.list.hosts"
                        },
                        "preprocessing": [
                            {
                                "type": "JAVASCRIPT",
                                "parameters": [
                                    "var json = JSON.parse(value);\n\nvar counts = json.lista_hosts.counts[0];\n\n// Objeto para mapear as descri\u00e7\u00f5es dos grupos\nvar descricoes = {\n  total_hosts_sem_templates: \"sem templates\",\n  total_hosts_sem_proxy: \"sem proxy\",\n  total_hosts_sem_grupos: \"sem grupos\"\n};\n\nvar output = Object.keys(counts).map(function(key) {\n  return {\n    \"{#TOTALNAME}\": key,\n    \"{#GROUPNAME}\": descricoes[key] || key\n  };\n});\n\nreturn JSON.stringify({ \"data\": output });\n"
                                ]
                            }
                        ]
                    },
                    {
                        "uuid": "803bab8fc1d146e2ba0f072b3a20437f",
                        "name": "Discovery  hosts sem grupos",
                        "type": "DEPENDENT",
                        "key": "zbx.discovery.list.hosts.sem.g.get",
                        "delay": "0",
                        "enabled_lifetime_type": "DISABLE_AFTER",
                        "enabled_lifetime": "1h",
                        "description": "Discovery hosts sem grupos\nHosts descobertos sem grupos atribu\u00eddos \u2014 lista ou quantidade de hosts que foram descobertos, mas que ainda n\u00e3o pertencem a nenhum grupo dentro do sistema Zabbix. Esses hosts podem estar isolados e sem categoriza\u00e7\u00e3o.",
                        "item_prototypes": [
                            {
                                "uuid": "d0892c966008495ab8711b50016a6e0d",
                                "name": "Host: {#HOSTNAME}",
                                "type": "DEPENDENT",
                                "key": "zbx.host.sem.g[\"{#HOSTID}\"]",
                                "delay": "0",
                                "valuemap": {
                                    "name": "Status hosts"
                                },
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.lista_hosts.hosts.hosts_sem_grupos[?(@.hostid=='{#HOSTID}')].hostid.first()"
                                        ]
                                    }
                                ],
                                "master_item": {
                                    "key": "zbx.get.list.hosts"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "sem grupo"
                                    }
                                ],
                                "trigger_prototypes": [
                                    {
                                        "uuid": "5d9ce4b42fab4667ae8d125fed3ebb94",
                                        "expression": "last(/Lista hosts sem - templates- grupos e proxys - V1/zbx.host.sem.g[\"{#HOSTID}\"],#2)<>0",
                                        "name": "O host \"{#HOSTNAME}\" esta sem grupo associado",
                                        "priority": "WARNING",
                                        "description": "Descri\u00e7\u00e3o do Alerta: Abertura de Chamado T\u00e9cnico \u2013 Equipe N\u00edvel 03 (Servidores)\nHor\u00e1rio de atendimento: Segunda a sexta, das 08h \u00e0s 19h.\n\nPasso a Passo para Tratamento do Alerta:\n\n1. Abertura de Chamado:\nVerifique se o alerta ocorreu dentro do hor\u00e1rio de atendimento (08h \u00e0s 19h).\nCaso positivo, abra imediatamente um chamado para a Equipe T\u00e9cnica N\u00edvel 03 \u2013 Servidores.\n\n2. Detalhamento do Alerta no Chamado:\nDescreva claramente o alerta recebido, incluindo:\n\nDescri\u00e7\u00e3o do alerta: O host \"{#HOSTNAME}\" esta {#GROUPNAME} associado\nNome do host afetado: {#HOSTNAME}\nID do host: {#HOSTID}\nIP: {#HOSTIP}\nSeveridade: {$ZBX.SEVERITY.WARN}\n\n3. Acompanhamento:\nAcompanhe o chamado com a equipe t\u00e9cnica at\u00e9 o encerramento do incidente.\nAtualize o status no sistema de monitoramento conforme a evolu\u00e7\u00e3o do caso.\nCertifique-se de que a causa raiz foi registrada (quando aplic\u00e1vel) e o servi\u00e7o est\u00e1 normalizado antes de fechar o chamado.\n\nFora do expediente (ap\u00f3s 19h e antes das 08h):\nRegistrar o alerta recebido no sistema de chamados com:\n\nDescri\u00e7\u00e3o do alerta: O host \"{#HOSTNAME}\" esta {#GROUPNAME} associado\nNome do host afetado: {#HOSTNAME}\nID do host: {#HOSTID}\nIP: {#HOSTIP}\nSeveridade: {$ZBX.SEVERITY.WARN}\n\nMarcar o chamado como \"Aguardando hor\u00e1rio comercial\" para tratativa da equipe t\u00e9cnica N\u00edvel 03.\n\nNotificar a equipe t\u00e9cnica assim que iniciar o expediente ou conforme definido nos procedimentos de escalonamento."
                                    }
                                ]
                            }
                        ],
                        "master_item": {
                            "key": "zbx.get.list.hosts"
                        },
                        "preprocessing": [
                            {
                                "type": "JAVASCRIPT",
                                "parameters": [
                                    "var json = JSON.parse(value);\n\nvar hostsSemGrupos = json.lista_hosts.hosts.hosts_sem_grupos;\n\nvar output = hostsSemGrupos.map(function(host) {\n  return {\n    \"{#HOSTID}\": host.hostid,\n    \"{#HOSTNAME}\": host.host,\n     \"{#HOSTIP}\": host.ip,\n    \"{#GROUPNAME}\": \"sem grupo\"\n  };\n});\n\nreturn JSON.stringify({ \"data\": output });\n"
                                ]
                            }
                        ]
                    },
                    {
                        "uuid": "bf30b84e3d8b42c78e686d2e83450c0d",
                        "name": "Discovery  hosts sem proxy",
                        "type": "DEPENDENT",
                        "key": "zbx.discovery.list.hosts.sem.p.get",
                        "delay": "0",
                        "enabled_lifetime_type": "DISABLE_AFTER",
                        "enabled_lifetime": "1h",
                        "description": "Discovery hosts sem proxy\nHosts descobertos sem proxy atribu\u00eddo \u2014 hosts que foram detectados, por\u00e9m n\u00e3o est\u00e3o associados a nenhum proxy de monitoramento. Um proxy \u00e9 usado para coletar dados em redes remotas ou segmentadas.",
                        "item_prototypes": [
                            {
                                "uuid": "ac1b08c4d88a442c9f76243b0eeee11d",
                                "name": "Host: {#HOSTNAME}",
                                "type": "DEPENDENT",
                                "key": "zbx.host.sem.p[\"{#HOSTID}\"]",
                                "delay": "0",
                                "units": "!ID",
                                "description": "Descri\u00e7\u00e3o do host: {#HOSTNAME}\n\nO host {#HOSTNAME} apresenta o poss\u00edvel problema {#GROUPNAME} associado:\nele foi encontrado via regra de descoberta e inserido no grupo {#GROUPNAME} para tratativas.\n\nAp\u00f3s a resolu\u00e7\u00e3o do caso {#GROUPNAME}, o host {#HOSTNAME} entrar\u00e1 no status 0,\ne sua trigger mudar\u00e1 o status de \"problema\" para \"resolvido\",\naguardando 1 hora para sair deste grupo de forma automatica.",
                                "valuemap": {
                                    "name": "Status hosts"
                                },
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.lista_hosts.hosts.hosts_sem_proxy[?(@.hostid=='{#HOSTID}')].hostid.first()"
                                        ],
                                        "error_handler": "CUSTOM_VALUE",
                                        "error_handler_params": "0"
                                    }
                                ],
                                "master_item": {
                                    "key": "zbx.get.list.hosts"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "sem proxy"
                                    }
                                ],
                                "trigger_prototypes": [
                                    {
                                        "uuid": "1bd2a3d2eefe4286a0814285307e9284",
                                        "expression": "last(/Lista hosts sem - templates- grupos e proxys - V1/zbx.host.sem.p[\"{#HOSTID}\"],#3)<>0",
                                        "name": "O host \"{#HOSTNAME}\" esta sem proxy associado",
                                        "priority": "HIGH",
                                        "description": "Descri\u00e7\u00e3o do Alerta: Abertura de Chamado T\u00e9cnico \u2013 Equipe N\u00edvel 03 (Servidores)\nHor\u00e1rio de atendimento: Segunda a sexta, das 08h \u00e0s 19h.\n\nPasso a Passo para Tratamento do Alerta:\n\n1. Abertura de Chamado:\nVerifique se o alerta ocorreu dentro do hor\u00e1rio de atendimento (08h \u00e0s 19h).\nCaso positivo, abra imediatamente um chamado para a Equipe T\u00e9cnica N\u00edvel 03 \u2013 Servidores.\n\n2. Detalhamento do Alerta no Chamado:\nDescreva claramente o alerta recebido, incluindo:\n\nDescri\u00e7\u00e3o do alerta: O host \"{#HOSTNAME}\" esta {#GROUPNAME} associado\nNome do host afetado: {#HOSTNAME}\nID do host: {#HOSTID}\nIP: {#HOSTIP}\nSeveridade: {$ZBX.SEVERITY.HIGH}\n\n3. Acompanhamento:\nAcompanhe o chamado com a equipe t\u00e9cnica at\u00e9 o encerramento do incidente.\nAtualize o status no sistema de monitoramento conforme a evolu\u00e7\u00e3o do caso.\nCertifique-se de que a causa raiz foi registrada (quando aplic\u00e1vel) e o servi\u00e7o est\u00e1 normalizado antes de fechar o chamado.\n\nFora do expediente (ap\u00f3s 19h e antes das 08h):\nRegistrar o alerta recebido no sistema de chamados com:\n\nDescri\u00e7\u00e3o do alerta: O host \"{#HOSTNAME}\" esta {#GROUPNAME} associado\nNome do host afetado: {#HOSTNAME}\nID do host: {#HOSTID}\nIP: {#HOSTIP}\nSeveridade: {$ZBX.SEVERITY.HIGH}\n\nMarcar o chamado como \"Aguardando hor\u00e1rio comercial\" para tratativa da equipe t\u00e9cnica N\u00edvel 03.\n\nNotificar a equipe t\u00e9cnica assim que iniciar o expediente ou conforme definido nos procedimentos de escalonamento."
                                    }
                                ]
                            }
                        ],
                        "master_item": {
                            "key": "zbx.get.list.hosts"
                        },
                        "preprocessing": [
                            {
                                "type": "JAVASCRIPT",
                                "parameters": [
                                    "var json = JSON.parse(value);\n\nvar hostsSemProxy = json.lista_hosts.hosts.hosts_sem_proxy;\n\nvar output = hostsSemProxy.map(function(host) {\n  return {\n    \"{#HOSTID}\": host.hostid,\n    \"{#HOSTNAME}\": host.host,\n     \"{#HOSTIP}\": host.ip,\n    \"{#GROUPNAME}\": \"sem grupo\"\n  };\n});\n\nreturn JSON.stringify({ \"data\": output });\n"
                                ]
                            }
                        ]
                    },
                    {
                        "uuid": "1e43db60af0a42899bf3b8e840397555",
                        "name": "Discovery hosts sem templates",
                        "type": "DEPENDENT",
                        "key": "zbx.discovery.list.hosts.sem.t.get",
                        "delay": "0",
                        "enabled_lifetime_type": "DISABLE_AFTER",
                        "enabled_lifetime": "1h",
                        "description": "Discovery hosts sem templates\nHosts descobertos sem templates vinculados \u2014 hosts que foram descobertos mas que n\u00e3o t\u00eam templates (modelos de monitoramento com itens e triggers) aplicados. Sem templates, esses hosts n\u00e3o ser\u00e3o monitorados efetivamente.",
                        "item_prototypes": [
                            {
                                "uuid": "668ec5e6b23d4578a7112b39d5b719b9",
                                "name": "Host: {#HOSTNAME}",
                                "type": "DEPENDENT",
                                "key": "zbx.host.sem.t[\"{#HOSTID}\"]",
                                "delay": "0",
                                "units": "!ID",
                                "valuemap": {
                                    "name": "Status hosts"
                                },
                                "preprocessing": [
                                    {
                                        "type": "JSONPATH",
                                        "parameters": [
                                            "$.lista_hosts.hosts.hosts_sem_templates[?(@.hostid=='{#HOSTID}')].hostid.first()"
                                        ],
                                        "error_handler": "DISCARD_VALUE"
                                    }
                                ],
                                "master_item": {
                                    "key": "zbx.get.list.hosts"
                                },
                                "tags": [
                                    {
                                        "tag": "component",
                                        "value": "sem template"
                                    }
                                ],
                                "trigger_prototypes": [
                                    {
                                        "uuid": "dfa87232c0a14c25b7dbaf243f406ebf",
                                        "expression": "last(/Lista hosts sem - templates- grupos e proxys - V1/zbx.host.sem.t[\"{#HOSTID}\"],#3)<>0",
                                        "name": "O host \"{#HOSTNAME}\" est\u00e1 sem template associado",
                                        "priority": "DISASTER",
                                        "description": "Descri\u00e7\u00e3o do Alerta: Abertura de Chamado T\u00e9cnico \u2013 Equipe N\u00edvel 03 (Servidores)\nHor\u00e1rio de atendimento: Segunda a sexta, das 08h \u00e0s 19h.\n\nPasso a Passo para Tratamento do Alerta:\n\n1. Abertura de Chamado:\nVerifique se o alerta ocorreu dentro do hor\u00e1rio de atendimento (08h \u00e0s 19h).\nCaso positivo, abra imediatamente um chamado para a Equipe T\u00e9cnica N\u00edvel 03 \u2013 Servidores.\n\n2. Detalhamento do Alerta no Chamado:\nDescreva claramente o alerta recebido, incluindo:\n\nDescri\u00e7\u00e3o do alerta: O host \"{#HOSTNAME}\" esta {#GROUPNAME} associado\nNome do host afetado: {#HOSTNAME}\nID do host: {#HOSTID}\nIP: {#HOSTIP}\nSeveridade: {$ZBX.SEVERITY.DISASTER}\n\n3. Acompanhamento:\nAcompanhe o chamado com a equipe t\u00e9cnica at\u00e9 o encerramento do incidente.\nAtualize o status no sistema de monitoramento conforme a evolu\u00e7\u00e3o do caso.\nCertifique-se de que a causa raiz foi registrada (quando aplic\u00e1vel) e o servi\u00e7o est\u00e1 normalizado antes de fechar o chamado.\n\nFora do expediente (ap\u00f3s 19h e antes das 08h):\nRegistrar o alerta recebido no sistema de chamados com:\n\nDescri\u00e7\u00e3o do alerta: O host \"{#HOSTNAME}\" esta {#GROUPNAME} associado\nNome do host afetado: {#HOSTNAME}\nID do host: {#HOSTID}\nIP: {#HOSTIP}\nSeveridade: {$ZBX.SEVERITY.DISASTER}\n\nMarcar o chamado como \"Aguardando hor\u00e1rio comercial\" para tratativa da equipe t\u00e9cnica N\u00edvel 03.\n\nNotificar a equipe t\u00e9cnica assim que iniciar o expediente ou conforme definido nos procedimentos de escalonamento."
                                    }
                                ]
                            }
                        ],
                        "master_item": {
                            "key": "zbx.get.list.hosts"
                        },
                        "preprocessing": [
                            {
                                "type": "JAVASCRIPT",
                                "parameters": [
                                    "// Parse o JSON\nvar json = JSON.parse(value);\n\n// Extrai o array hosts_sem_templates\nvar hostsSemTemplates = json.lista_hosts.hosts.hosts_sem_templates;\n\n// Mapeia para o formato LLD esperado\nvar output = hostsSemTemplates.map(function(host) {\n  return {\n    \"{#HOSTID}\": host.hostid,\n    \"{#HOSTNAME}\": host.host,\n    \"{#HOSTIP}\": host.ip,\n    \"{#GROUPNAME}\": \"sem template\"\n  };\n});\n\n// Retorna string JSON com array dentro da chave \"data\"\nreturn JSON.stringify({ \"data\": output });\n"
                                ]
                            }
                        ]
                    }
                ],
                "macros": [
                    {
                        "macro": "{$ZBX.API.ENDPOINT}",
                        "value": "http://192.168.1.36/zabbix/",
                        "description": "URL do endpoint da API do Zabbix.Exemplo: http://seu-zabbix-servidor/zabbix"
                    },
                    {
                        "macro": "{$ZBX.API.IGNORE.HOSTS}",
                        "value": "Zabbix list|Zabbix lis2",
                        "description": "Lista de hosts que devem ser ignorados nas consultas API, geralmente separados por pipe (|). Exemplo: host1|host2|host3"
                    },
                    {
                        "macro": "{$ZBX.API.PASSWORD}",
                        "value": "zabbix",
                        "description": "Senha do usu\u00e1rio para autentica\u00e7\u00e3o na API do Zabbix."
                    },
                    {
                        "macro": "{$ZBX.API.USERNAME}",
                        "value": "Admin",
                        "description": "Nome do usu\u00e1rio para autentica\u00e7\u00e3o na API do Zabbix."
                    },
                    {
                        "macro": "{$ZBX.HISTORY}",
                        "value": "0d",
                        "description": "Intervalo de tempo ou quantidade de hist\u00f3rico para consulta de dados de m\u00e9tricas ou eventos."
                    },
                    {
                        "macro": "{$ZBX.INTERVAL.TIME}",
                        "value": "1m",
                        "description": "Intervalo de atualiza\u00e7\u00e3o ou polling para a execu\u00e7\u00e3o do script ou coleta dos dados"
                    },
                    {
                        "macro": "{$ZBX.SEVERITY.AVERAGE}",
                        "value": "M\u00e9dio (Average)",
                        "description": "Problema de gravidade m\u00e9dia."
                    },
                    {
                        "macro": "{$ZBX.SEVERITY.DISASTER}",
                        "value": "Desastre (Disaster)",
                        "description": "Problema cr\u00edtico, requer a\u00e7\u00e3o imediata."
                    },
                    {
                        "macro": "{$ZBX.SEVERITY.HIGH}",
                        "value": "Alto (High)",
                        "description": "Problema grave que pode impactar servi\u00e7os."
                    },
                    {
                        "macro": "{$ZBX.SEVERITY.WARN}",
                        "value": "Aviso (Warning)",
                        "description": "Evento importante, aten\u00e7\u00e3o recomendada."
                    }
                ],
                "valuemaps": [
                    {
                        "uuid": "bf62e7b43aad4e42837ce343e6e32306",
                        "name": "Status hosts",
                        "mappings": [
                            {
                                "value": "0",
                                "newvalue": "Resolvido"
                            }
                        ]
                    }
                ]
            }
        ]
    }
}