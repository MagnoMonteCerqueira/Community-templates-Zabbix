<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>7.0</version>
    <template_groups>
        <template_group>
            <uuid>a571c0d144b14fd4a87a9d9b2aa9fcd6</uuid>
            <name>Templates/Applications</name>
        </template_group>
    </template_groups>
    <templates>
        <template>
            <uuid>a7add9e7ab944760b036d93cdacfb6db</uuid>
            <template>Lista hosts sem - templates- grupos e proxys - V1</template>
            <name>Lista hosts sem - templates- grupos e proxys - V1</name>
            <description>Template: Lista hosts sem - templates, grupos e proxys - V1

Este template é um script JavaScript que conecta à API JSON-RPC do Zabbix para listar hosts ativos que estão sem vinculação a templates, sem associação a grupos e sem proxy atribuído. Ele realiza as seguintes funções:

Recebe parâmetros de configuração (endpoint da API, usuário, senha e hosts para ignorar).

Realiza autenticação na API do Zabbix, obtendo token de acesso.

Busca todas as interfaces de hosts para mapear seus IPs ou nomes DNS.

Busca todos os hosts cadastrados e filtra somente os que estão ativos (status = 0).

Verifica para cada host se ele não possui template vinculado, se está sem proxy, ou se não está associado a grupo algum.

Considera somente hosts que possuem IP ou DNS válido associado.

Ignora hosts listados explicitamente no parâmetro ignore_hosts.

Retorna um JSON organizado em três listas:

hosts_sem_templates: hosts sem templates vinculados.

hosts_sem_proxy: hosts sem proxy atribuído.

hosts_sem_grupos: hosts sem grupos associados.

Também retorna contagens totais para cada uma dessas categorias.

O resultado é um relatório detalhado dos hosts ativos que precisam de correções ou associações para um gerenciamento eficiente na plataforma Zabbix.

Analista: Magno M Cerqueira
Data: 06/08/2025</description>
            <groups>
                <group>
                    <name>Templates/Applications</name>
                </group>
            </groups>
            <items>
                <item>
                    <uuid>1bf1cdb1b06641aa89ea36c203f5f646</uuid>
                    <name>get list hosts</name>
                    <type>SCRIPT</type>
                    <key>zbx.get.list.hosts</key>
                    <delay>{$ZBX.INTERVAL.TIME}</delay>
                    <history>{$ZBX.HISTORY}</history>
                    <value_type>TEXT</value_type>
                    <trends>0</trends>
                    <params>var ZabbixAPI = {
  params: {}, // objeto para armazenar parâmetros passados (endpoint, user, password, etc)
  authToken: '', // token de autenticação gerado após login

  // Função para configurar parâmetros obrigatórios
  setParams: function (params) {
    ['api_endpoint', 'user', 'password'].forEach(function (field) {
      if (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {
        throw 'Required param is not set: ' + field + '.';
      }
    });

    if (typeof params.ignore_hosts === 'string' &amp;&amp; params.ignore_hosts.trim() !== '') {
      params.ignore_hosts_array = params.ignore_hosts.split('|').map(function (h) { return h.trim(); });
    } else {
      params.ignore_hosts_array = [];
    }

    ZabbixAPI.params = params;
    if (!ZabbixAPI.params.api_endpoint.endsWith('/')) {
      ZabbixAPI.params.api_endpoint += '/';
    }
  },

  // Função para autenticar e obter token
  login: function () {
    var req = new HttpRequest();
    req.addHeader('Content-Type: application/json-rpc');

    var payload = JSON.stringify({
      jsonrpc: '2.0',
      method: 'user.login',
      params: {
        username: ZabbixAPI.params.user,
        password: ZabbixAPI.params.password
      },
      id: 1,
      auth: null
    });

    var response = req.post(ZabbixAPI.params.api_endpoint + 'api_jsonrpc.php', payload);
    if (req.getStatus() !== 200 || response === null) {
      throw 'Login failed with status code ' + req.getStatus() + ': ' + response;
    }

    var json = JSON.parse(response);
    if (!json.result) {
      throw 'Auth token not returned from Zabbix API.';
    }

    ZabbixAPI.authToken = json.result;
  },

  // Função genérica para chamadas na API Zabbix
  request: function (method, paramsObj) {
    var req = new HttpRequest();
    req.addHeader('Content-Type: application/json-rpc');

    var payload = JSON.stringify({
      jsonrpc: '2.0',
      method: method,
      params: paramsObj,
      id: 1,
      auth: ZabbixAPI.authToken
    });

    var response = req.post(ZabbixAPI.params.api_endpoint + 'api_jsonrpc.php', payload);

    if (req.getStatus() !== 200 || response === null) {
      throw 'Request failed with status code ' + req.getStatus() + ': ' + response;
    }

    var json;
    try {
      json = JSON.parse(response);
    } catch (e) {
      throw 'Failed to parse response from API.';
    }

    if (json.error) {
      throw 'API error: ' + JSON.stringify(json.error);
    }

    return json.result;
  },

  // Obtem IPs ou DNS das interfaces dos hosts
  getHostIPs: function () {
    var interfaces = ZabbixAPI.request('hostinterface.get', {
      output: ['hostid', 'ip', 'dns', 'useip']
    });

    var ipMap = {};

    interfaces.forEach(function (iface) {
      var hostId = iface.hostid;

      if ((iface.useip === &quot;1&quot; || iface.useip === 1) &amp;&amp; iface.ip) {
        ipMap[hostId] = iface.ip;
      } else if ((iface.useip === &quot;0&quot; || iface.useip === 0) &amp;&amp; iface.dns) {
        ipMap[hostId] = iface.dns;
      }
    });

    return ipMap;
  },

  // Coleta e organiza dados dos hosts conforme filtros e regras
  getMetricsData: function () {
    var data = {
      hosts_sem_templates: [],
      hosts_sem_proxy: [],
      hosts_sem_grupos: []
    };

    var allHosts = ZabbixAPI.request('host.get', {
      output: ['hostid', 'host', 'proxy_hostid', 'proxyid', 'status'],
      selectGroups: ['groupid', 'name'],
      selectParentTemplates: ['templateid', 'name']
    });

    var ipMap = ZabbixAPI.getHostIPs();

    allHosts.forEach(function (host) {
      if (host.status !== &quot;0&quot;) return; // só hosts ativos

      // Obtém IP ou DNS, ou define &quot;(sem dados)&quot; se não existir
      var ipOrDns = &quot;(sem dados)&quot;;
      if (ipMap.hasOwnProperty(host.hostid)) {
        var val = ipMap[host.hostid];
        if (val &amp;&amp; val.trim() !== '') {
          ipOrDns = val;
        }
      }

      // Hosts sem template vinculado
      if (!host.parentTemplates || host.parentTemplates.length === 0) {
        data.hosts_sem_templates.push({
          hostid: host.hostid,
          host: host.host,
          ip: ipOrDns
        });
      }

      // Hosts sem proxy
      if (
        (
          !host.hasOwnProperty('proxy_hostid') ||
          host.proxy_hostid === null ||
          host.proxy_hostid === undefined ||
          host.proxy_hostid === '0' ||
          host.proxy_hostid === 0
        ) &amp;&amp;
        (host.proxyid === &quot;0&quot; || host.proxyid === 0)
      ) {
        if (ZabbixAPI.params.ignore_hosts_array.indexOf(host.host) === -1) {
          data.hosts_sem_proxy.push({
            hostid: host.hostid,
            host: host.host,
            ip: ipOrDns
          });
        }
      }

      // Hosts sem grupos
      if (!host.groups || host.groups.length === 0) {
        data.hosts_sem_grupos.push({
          hostid: host.hostid,
          host: host.host,
          ip: ipOrDns
        });
      }
    });

    return {
      hosts: data,
      counts: [{
        total_hosts_sem_templates: data.hosts_sem_templates.length,
        total_hosts_sem_proxy: data.hosts_sem_proxy.length,
        total_hosts_sem_grupos: data.hosts_sem_grupos.length
      }]
    };
  }
};

try {
  ZabbixAPI.setParams(JSON.parse(value));
  ZabbixAPI.login();
  return JSON.stringify({ lista_hosts: ZabbixAPI.getMetricsData() });
} catch (error) {
  error += (String(error).endsWith('.')) ? '' : '.';
  Zabbix.log(3, '[ ZABBIX ] ERROR: ' + error);
  return JSON.stringify({ 'error': error });
}</params>
                    <description>Descrição:
Este item realiza uma chamada à API do Zabbix para obter a lista de hosts cadastrados no sistema. Os dados retornados podem incluir informações como ID do host, nome, grupo, status de monitoramento, associação a proxies e vinculação com templates. Este item é utilizado para fins de inventário dinâmico, integração com dashboards ou validações automatizadas de ambiente.</description>
                    <parameters>
                        <parameter>
                            <name>api_endpoint</name>
                            <value>{$ZBX.API.ENDPOINT}</value>
                        </parameter>
                        <parameter>
                            <name>ignore_hosts</name>
                            <value>{$ZBX.API.IGNORE.HOSTS}</value>
                        </parameter>
                        <parameter>
                            <name>password</name>
                            <value>{$ZBX.API.PASSWORD}</value>
                        </parameter>
                        <parameter>
                            <name>user</name>
                            <value>{$ZBX.API.USERNAME}</value>
                        </parameter>
                    </parameters>
                    <tags>
                        <tag>
                            <tag>component</tag>
                            <value>raw</value>
                        </tag>
                    </tags>
                </item>
            </items>
            <discovery_rules>
                <discovery_rule>
                    <uuid>f45f8042a0264f2689a7920b0636bbe3</uuid>
                    <name>Discovery counts hosts</name>
                    <type>DEPENDENT</type>
                    <key>zbx.discovery.list.counts.hosts.get</key>
                    <delay>0</delay>
                    <description>Discovery counts hosts
Contagem total de hosts descobertos — representa o número total de hosts que foram detectados (descobertos) pelo processo de discovery no ambiente de monitoramento.</description>
                    <item_prototypes>
                        <item_prototype>
                            <uuid>873e7613d7584770bfda647c03090d87</uuid>
                            <name>{#TOTALNAME}</name>
                            <type>DEPENDENT</type>
                            <key>count[&quot;{#TOTALNAME}&quot;]</key>
                            <delay>0</delay>
                            <description>Descrição do item {#TOTALNAME}
Este item retorna o número total de hosts cadastrados no Zabbix que estão na categoria {#GROUPNAME}. Essa métrica é útil para identificar hosts que precisam de atenção, pois a condição {#GROUPNAME} pode impactar o monitoramento efetivo do ambiente.

Utilização:
Verificar hosts que estejam {#GROUPNAME}..

Ajudar na manutenção e organização do ambiente monitorado.

Servir como base para relatórios e dashboards (ex: Grafana) que destacam possíveis falhas na configuração.

Origem:
Este dado é extraído via API do Zabbix, utilizando o método host.get com filtros específicos para retornar hosts que estejam {#GROUPNAME}.</description>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <parameters>
                                        <parameter>$.lista_hosts.counts[:].{#TOTALNAME}.first()</parameter>
                                    </parameters>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>zbx.get.list.hosts</key>
                            </master_item>
                            <tags>
                                <tag>
                                    <tag>component</tag>
                                    <value>total</value>
                                </tag>
                                <tag>
                                    <tag>count</tag>
                                    <value>{#GROUPNAME}</value>
                                </tag>
                            </tags>
                        </item_prototype>
                    </item_prototypes>
                    <master_item>
                        <key>zbx.get.list.hosts</key>
                    </master_item>
                    <preprocessing>
                        <step>
                            <type>JAVASCRIPT</type>
                            <parameters>
                                <parameter>var json = JSON.parse(value);

var counts = json.lista_hosts.counts[0];

// Objeto para mapear as descrições dos grupos
var descricoes = {
  total_hosts_sem_templates: &quot;sem templates&quot;,
  total_hosts_sem_proxy: &quot;sem proxy&quot;,
  total_hosts_sem_grupos: &quot;sem grupos&quot;
};

var output = Object.keys(counts).map(function(key) {
  return {
    &quot;{#TOTALNAME}&quot;: key,
    &quot;{#GROUPNAME}&quot;: descricoes[key] || key
  };
});

return JSON.stringify({ &quot;data&quot;: output });
</parameter>
                            </parameters>
                        </step>
                    </preprocessing>
                </discovery_rule>
                <discovery_rule>
                    <uuid>803bab8fc1d146e2ba0f072b3a20437f</uuid>
                    <name>Discovery  hosts sem grupos</name>
                    <type>DEPENDENT</type>
                    <key>zbx.discovery.list.hosts.sem.g.get</key>
                    <delay>0</delay>
                    <enabled_lifetime_type>DISABLE_AFTER</enabled_lifetime_type>
                    <enabled_lifetime>1h</enabled_lifetime>
                    <description>Discovery hosts sem grupos
Hosts descobertos sem grupos atribuídos — lista ou quantidade de hosts que foram descobertos, mas que ainda não pertencem a nenhum grupo dentro do sistema Zabbix. Esses hosts podem estar isolados e sem categorização.</description>
                    <item_prototypes>
                        <item_prototype>
                            <uuid>d0892c966008495ab8711b50016a6e0d</uuid>
                            <name>Host: {#HOSTNAME}</name>
                            <type>DEPENDENT</type>
                            <key>zbx.host.sem.g[&quot;{#HOSTID}&quot;]</key>
                            <delay>0</delay>
                            <valuemap>
                                <name>Status hosts</name>
                            </valuemap>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <parameters>
                                        <parameter>$.lista_hosts.hosts.hosts_sem_grupos[?(@.hostid=='{#HOSTID}')].hostid.first()</parameter>
                                    </parameters>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>zbx.get.list.hosts</key>
                            </master_item>
                            <tags>
                                <tag>
                                    <tag>component</tag>
                                    <value>sem grupo</value>
                                </tag>
                            </tags>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <uuid>5d9ce4b42fab4667ae8d125fed3ebb94</uuid>
                                    <expression>last(/Lista hosts sem - templates- grupos e proxys - V1/zbx.host.sem.g[&quot;{#HOSTID}&quot;],#2)&lt;&gt;0</expression>
                                    <name>O host &quot;{#HOSTNAME}&quot; esta sem grupo associado</name>
                                    <priority>WARNING</priority>
                                    <description>Descrição do Alerta: Abertura de Chamado Técnico – Equipe Nível 03 (Servidores)
Horário de atendimento: Segunda a sexta, das 08h às 19h.

Passo a Passo para Tratamento do Alerta:

1. Abertura de Chamado:
Verifique se o alerta ocorreu dentro do horário de atendimento (08h às 19h).
Caso positivo, abra imediatamente um chamado para a Equipe Técnica Nível 03 – Servidores.

2. Detalhamento do Alerta no Chamado:
Descreva claramente o alerta recebido, incluindo:

Descrição do alerta: O host &quot;{#HOSTNAME}&quot; esta {#GROUPNAME} associado
Nome do host afetado: {#HOSTNAME}
ID do host: {#HOSTID}
IP: {#HOSTIP}
Severidade: {$ZBX.SEVERITY.WARN}

3. Acompanhamento:
Acompanhe o chamado com a equipe técnica até o encerramento do incidente.
Atualize o status no sistema de monitoramento conforme a evolução do caso.
Certifique-se de que a causa raiz foi registrada (quando aplicável) e o serviço está normalizado antes de fechar o chamado.

Fora do expediente (após 19h e antes das 08h):
Registrar o alerta recebido no sistema de chamados com:

Descrição do alerta: O host &quot;{#HOSTNAME}&quot; esta {#GROUPNAME} associado
Nome do host afetado: {#HOSTNAME}
ID do host: {#HOSTID}
IP: {#HOSTIP}
Severidade: {$ZBX.SEVERITY.WARN}

Marcar o chamado como &quot;Aguardando horário comercial&quot; para tratativa da equipe técnica Nível 03.

Notificar a equipe técnica assim que iniciar o expediente ou conforme definido nos procedimentos de escalonamento.</description>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                    </item_prototypes>
                    <master_item>
                        <key>zbx.get.list.hosts</key>
                    </master_item>
                    <preprocessing>
                        <step>
                            <type>JAVASCRIPT</type>
                            <parameters>
                                <parameter>var json = JSON.parse(value);

var hostsSemGrupos = json.lista_hosts.hosts.hosts_sem_grupos;

var output = hostsSemGrupos.map(function(host) {
  return {
    &quot;{#HOSTID}&quot;: host.hostid,
    &quot;{#HOSTNAME}&quot;: host.host,
     &quot;{#HOSTIP}&quot;: host.ip,
    &quot;{#GROUPNAME}&quot;: &quot;sem grupo&quot;
  };
});

return JSON.stringify({ &quot;data&quot;: output });
</parameter>
                            </parameters>
                        </step>
                    </preprocessing>
                </discovery_rule>
                <discovery_rule>
                    <uuid>bf30b84e3d8b42c78e686d2e83450c0d</uuid>
                    <name>Discovery  hosts sem proxy</name>
                    <type>DEPENDENT</type>
                    <key>zbx.discovery.list.hosts.sem.p.get</key>
                    <delay>0</delay>
                    <enabled_lifetime_type>DISABLE_AFTER</enabled_lifetime_type>
                    <enabled_lifetime>1h</enabled_lifetime>
                    <description>Discovery hosts sem proxy
Hosts descobertos sem proxy atribuído — hosts que foram detectados, porém não estão associados a nenhum proxy de monitoramento. Um proxy é usado para coletar dados em redes remotas ou segmentadas.</description>
                    <item_prototypes>
                        <item_prototype>
                            <uuid>ac1b08c4d88a442c9f76243b0eeee11d</uuid>
                            <name>Host: {#HOSTNAME}</name>
                            <type>DEPENDENT</type>
                            <key>zbx.host.sem.p[&quot;{#HOSTID}&quot;]</key>
                            <delay>0</delay>
                            <units>!ID</units>
                            <description>Descrição do host: {#HOSTNAME}

O host {#HOSTNAME} apresenta o possível problema {#GROUPNAME} associado:
ele foi encontrado via regra de descoberta e inserido no grupo {#GROUPNAME} para tratativas.

Após a resolução do caso {#GROUPNAME}, o host {#HOSTNAME} entrará no status 0,
e sua trigger mudará o status de &quot;problema&quot; para &quot;resolvido&quot;,
aguardando 1 hora para sair deste grupo de forma automatica.</description>
                            <valuemap>
                                <name>Status hosts</name>
                            </valuemap>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <parameters>
                                        <parameter>$.lista_hosts.hosts.hosts_sem_proxy[?(@.hostid=='{#HOSTID}')].hostid.first()</parameter>
                                    </parameters>
                                    <error_handler>CUSTOM_VALUE</error_handler>
                                    <error_handler_params>0</error_handler_params>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>zbx.get.list.hosts</key>
                            </master_item>
                            <tags>
                                <tag>
                                    <tag>component</tag>
                                    <value>sem proxy</value>
                                </tag>
                            </tags>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <uuid>1bd2a3d2eefe4286a0814285307e9284</uuid>
                                    <expression>last(/Lista hosts sem - templates- grupos e proxys - V1/zbx.host.sem.p[&quot;{#HOSTID}&quot;],#3)&lt;&gt;0</expression>
                                    <name>O host &quot;{#HOSTNAME}&quot; esta sem proxy associado</name>
                                    <priority>HIGH</priority>
                                    <description>Descrição do Alerta: Abertura de Chamado Técnico – Equipe Nível 03 (Servidores)
Horário de atendimento: Segunda a sexta, das 08h às 19h.

Passo a Passo para Tratamento do Alerta:

1. Abertura de Chamado:
Verifique se o alerta ocorreu dentro do horário de atendimento (08h às 19h).
Caso positivo, abra imediatamente um chamado para a Equipe Técnica Nível 03 – Servidores.

2. Detalhamento do Alerta no Chamado:
Descreva claramente o alerta recebido, incluindo:

Descrição do alerta: O host &quot;{#HOSTNAME}&quot; esta {#GROUPNAME} associado
Nome do host afetado: {#HOSTNAME}
ID do host: {#HOSTID}
IP: {#HOSTIP}
Severidade: {$ZBX.SEVERITY.HIGH}

3. Acompanhamento:
Acompanhe o chamado com a equipe técnica até o encerramento do incidente.
Atualize o status no sistema de monitoramento conforme a evolução do caso.
Certifique-se de que a causa raiz foi registrada (quando aplicável) e o serviço está normalizado antes de fechar o chamado.

Fora do expediente (após 19h e antes das 08h):
Registrar o alerta recebido no sistema de chamados com:

Descrição do alerta: O host &quot;{#HOSTNAME}&quot; esta {#GROUPNAME} associado
Nome do host afetado: {#HOSTNAME}
ID do host: {#HOSTID}
IP: {#HOSTIP}
Severidade: {$ZBX.SEVERITY.HIGH}

Marcar o chamado como &quot;Aguardando horário comercial&quot; para tratativa da equipe técnica Nível 03.

Notificar a equipe técnica assim que iniciar o expediente ou conforme definido nos procedimentos de escalonamento.</description>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                    </item_prototypes>
                    <master_item>
                        <key>zbx.get.list.hosts</key>
                    </master_item>
                    <preprocessing>
                        <step>
                            <type>JAVASCRIPT</type>
                            <parameters>
                                <parameter>var json = JSON.parse(value);

var hostsSemProxy = json.lista_hosts.hosts.hosts_sem_proxy;

var output = hostsSemProxy.map(function(host) {
  return {
    &quot;{#HOSTID}&quot;: host.hostid,
    &quot;{#HOSTNAME}&quot;: host.host,
     &quot;{#HOSTIP}&quot;: host.ip,
    &quot;{#GROUPNAME}&quot;: &quot;sem grupo&quot;
  };
});

return JSON.stringify({ &quot;data&quot;: output });
</parameter>
                            </parameters>
                        </step>
                    </preprocessing>
                </discovery_rule>
                <discovery_rule>
                    <uuid>1e43db60af0a42899bf3b8e840397555</uuid>
                    <name>Discovery hosts sem templates</name>
                    <type>DEPENDENT</type>
                    <key>zbx.discovery.list.hosts.sem.t.get</key>
                    <delay>0</delay>
                    <enabled_lifetime_type>DISABLE_AFTER</enabled_lifetime_type>
                    <enabled_lifetime>1h</enabled_lifetime>
                    <description>Discovery hosts sem templates
Hosts descobertos sem templates vinculados — hosts que foram descobertos mas que não têm templates (modelos de monitoramento com itens e triggers) aplicados. Sem templates, esses hosts não serão monitorados efetivamente.</description>
                    <item_prototypes>
                        <item_prototype>
                            <uuid>668ec5e6b23d4578a7112b39d5b719b9</uuid>
                            <name>Host: {#HOSTNAME}</name>
                            <type>DEPENDENT</type>
                            <key>zbx.host.sem.t[&quot;{#HOSTID}&quot;]</key>
                            <delay>0</delay>
                            <units>!ID</units>
                            <valuemap>
                                <name>Status hosts</name>
                            </valuemap>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <parameters>
                                        <parameter>$.lista_hosts.hosts.hosts_sem_templates[?(@.hostid=='{#HOSTID}')].hostid.first()</parameter>
                                    </parameters>
                                    <error_handler>DISCARD_VALUE</error_handler>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>zbx.get.list.hosts</key>
                            </master_item>
                            <tags>
                                <tag>
                                    <tag>component</tag>
                                    <value>sem template</value>
                                </tag>
                            </tags>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <uuid>dfa87232c0a14c25b7dbaf243f406ebf</uuid>
                                    <expression>last(/Lista hosts sem - templates- grupos e proxys - V1/zbx.host.sem.t[&quot;{#HOSTID}&quot;],#3)&lt;&gt;0</expression>
                                    <name>O host &quot;{#HOSTNAME}&quot; está sem template associado</name>
                                    <priority>DISASTER</priority>
                                    <description>Descrição do Alerta: Abertura de Chamado Técnico – Equipe Nível 03 (Servidores)
Horário de atendimento: Segunda a sexta, das 08h às 19h.

Passo a Passo para Tratamento do Alerta:

1. Abertura de Chamado:
Verifique se o alerta ocorreu dentro do horário de atendimento (08h às 19h).
Caso positivo, abra imediatamente um chamado para a Equipe Técnica Nível 03 – Servidores.

2. Detalhamento do Alerta no Chamado:
Descreva claramente o alerta recebido, incluindo:

Descrição do alerta: O host &quot;{#HOSTNAME}&quot; esta {#GROUPNAME} associado
Nome do host afetado: {#HOSTNAME}
ID do host: {#HOSTID}
IP: {#HOSTIP}
Severidade: {$ZBX.SEVERITY.DISASTER}

3. Acompanhamento:
Acompanhe o chamado com a equipe técnica até o encerramento do incidente.
Atualize o status no sistema de monitoramento conforme a evolução do caso.
Certifique-se de que a causa raiz foi registrada (quando aplicável) e o serviço está normalizado antes de fechar o chamado.

Fora do expediente (após 19h e antes das 08h):
Registrar o alerta recebido no sistema de chamados com:

Descrição do alerta: O host &quot;{#HOSTNAME}&quot; esta {#GROUPNAME} associado
Nome do host afetado: {#HOSTNAME}
ID do host: {#HOSTID}
IP: {#HOSTIP}
Severidade: {$ZBX.SEVERITY.DISASTER}

Marcar o chamado como &quot;Aguardando horário comercial&quot; para tratativa da equipe técnica Nível 03.

Notificar a equipe técnica assim que iniciar o expediente ou conforme definido nos procedimentos de escalonamento.</description>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                    </item_prototypes>
                    <master_item>
                        <key>zbx.get.list.hosts</key>
                    </master_item>
                    <preprocessing>
                        <step>
                            <type>JAVASCRIPT</type>
                            <parameters>
                                <parameter>// Parse o JSON
var json = JSON.parse(value);

// Extrai o array hosts_sem_templates
var hostsSemTemplates = json.lista_hosts.hosts.hosts_sem_templates;

// Mapeia para o formato LLD esperado
var output = hostsSemTemplates.map(function(host) {
  return {
    &quot;{#HOSTID}&quot;: host.hostid,
    &quot;{#HOSTNAME}&quot;: host.host,
    &quot;{#HOSTIP}&quot;: host.ip,
    &quot;{#GROUPNAME}&quot;: &quot;sem template&quot;
  };
});

// Retorna string JSON com array dentro da chave &quot;data&quot;
return JSON.stringify({ &quot;data&quot;: output });
</parameter>
                            </parameters>
                        </step>
                    </preprocessing>
                </discovery_rule>
            </discovery_rules>
            <macros>
                <macro>
                    <macro>{$ZBX.API.ENDPOINT}</macro>
                    <value>http://192.168.1.36/zabbix/</value>
                    <description>URL do endpoint da API do Zabbix.Exemplo: http://seu-zabbix-servidor/zabbix</description>
                </macro>
                <macro>
                    <macro>{$ZBX.API.IGNORE.HOSTS}</macro>
                    <value>Zabbix list|Zabbix lis2</value>
                    <description>Lista de hosts que devem ser ignorados nas consultas API, geralmente separados por pipe (|). Exemplo: host1|host2|host3</description>
                </macro>
                <macro>
                    <macro>{$ZBX.API.PASSWORD}</macro>
                    <value>zabbix</value>
                    <description>Senha do usuário para autenticação na API do Zabbix.</description>
                </macro>
                <macro>
                    <macro>{$ZBX.API.USERNAME}</macro>
                    <value>Admin</value>
                    <description>Nome do usuário para autenticação na API do Zabbix.</description>
                </macro>
                <macro>
                    <macro>{$ZBX.HISTORY}</macro>
                    <value>0d</value>
                    <description>Intervalo de tempo ou quantidade de histórico para consulta de dados de métricas ou eventos.</description>
                </macro>
                <macro>
                    <macro>{$ZBX.INTERVAL.TIME}</macro>
                    <value>1m</value>
                    <description>Intervalo de atualização ou polling para a execução do script ou coleta dos dados</description>
                </macro>
                <macro>
                    <macro>{$ZBX.SEVERITY.AVERAGE}</macro>
                    <value>Médio (Average)</value>
                    <description>Problema de gravidade média.</description>
                </macro>
                <macro>
                    <macro>{$ZBX.SEVERITY.DISASTER}</macro>
                    <value>Desastre (Disaster)</value>
                    <description>Problema crítico, requer ação imediata.</description>
                </macro>
                <macro>
                    <macro>{$ZBX.SEVERITY.HIGH}</macro>
                    <value>Alto (High)</value>
                    <description>Problema grave que pode impactar serviços.</description>
                </macro>
                <macro>
                    <macro>{$ZBX.SEVERITY.WARN}</macro>
                    <value>Aviso (Warning)</value>
                    <description>Evento importante, atenção recomendada.</description>
                </macro>
            </macros>
            <valuemaps>
                <valuemap>
                    <uuid>bf62e7b43aad4e42837ce343e6e32306</uuid>
                    <name>Status hosts</name>
                    <mappings>
                        <mapping>
                            <value>0</value>
                            <newvalue>Resolvido</newvalue>
                        </mapping>
                    </mappings>
                </valuemap>
            </valuemaps>
        </template>
    </templates>
</zabbix_export>
