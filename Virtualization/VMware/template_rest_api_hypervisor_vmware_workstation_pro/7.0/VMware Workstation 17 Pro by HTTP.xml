<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>7.0</version>
    <template_groups>
        <template_group>
            <uuid>02e4df4f20b848e79267641790f241da</uuid>
            <name>Templates/Virtualization</name>
        </template_group>
    </template_groups>
    <templates>
        <template>
            <uuid>94f344249e1c473fab1ce37d10767281</uuid>
            <template>VMware Workstation 17 Pro by HTTP</template>
            <name>VMware Workstation 17 Pro by HTTP</name>
            <description>üìò Template: VMware Workstation 17 Pro by HTTP
Autor: Magno M. Cerqueira
Data de cria√ß√£o: 11/07/2025
Vers√£o: 1.0

Curso relacionado:
üéì Zabbix 7.0 Academy: Monitoring Veeam backup from basic to advanced
URL do curso: https://go.hotmart.com/C92709578Y?dp=1

Descri√ß√£o Geral:
Este template foi desenvolvido para o monitoramento do VMware Workstation Pro 17 utilizando sua API REST nativa, acessada via chamadas HTTP. A coleta de dados √© realizada sem necessidade de agente, tornando-o ideal para ambientes de testes, laborat√≥rios ou uso local com m√∫ltiplas VMs.

Funcionalidades Monitoradas:
üîπ Nome da m√°quina virtual (VM)
üîπ Estado de energia: poweredOn (ligada) ou poweredOff (desligada)
üîπ Quantidade de CPUs alocadas
üîπ Mem√≥ria da VM em bytes
üîπ Quantidade total de VMs
üîπ Quantidade de VMs online e offline</description>
            <vendor>
                <name>Probix</name>
                <version>7.0-1</version>
            </vendor>
            <groups>
                <group>
                    <name>Templates/Virtualization</name>
                </group>
            </groups>
            <items>
                <item>
                    <uuid>e3006fb01e7147b38beb6970fccc4dab</uuid>
                    <name>Get Erros</name>
                    <type>SCRIPT</type>
                    <key>veeam.get.erros</key>
                    <trends>0</trends>
                    <params>var ApiHealthCheck = {
    params: {},

    setParams: function(params) {
        if (typeof params !== 'object') {
            throw 'Par√¢metros inv√°lidos.';
        }
        if (typeof params.api_endpoint !== 'string' || params.api_endpoint.trim() === '') {
            throw 'Par√¢metro obrigat√≥rio &quot;api_endpoint&quot; n√£o definido ou inv√°lido.';
        }
        if (typeof params.status_schema !== 'string' || ['http', 'https'].indexOf(params.status_schema.toLowerCase()) === -1) {
            throw 'Par√¢metro obrigat√≥rio &quot;status_schema&quot; inv√°lido. Deve ser &quot;http&quot; ou &quot;https&quot;.';
        }

        // Aceita api_port como string ou number e converte para inteiro
        var port = params.api_port;
        if (typeof port === 'string') {
            port = parseInt(port, 10);
        }
        if (typeof port !== 'number' || isNaN(port) || port &lt;= 0) {
            throw 'Par√¢metro obrigat√≥rio &quot;api_port&quot; n√£o definido ou inv√°lido.';
        }

        this.params = params;
        this.params.api_port = port;  // atualiza o valor convertido

        var schema = this.params.status_schema.toLowerCase();
        var endpoint = this.params.api_endpoint.trim();
        var port = this.params.api_port;

        if (endpoint.endsWith('/')) {
            endpoint = endpoint.slice(0, -1);
        }

        this.params.full_url = schema + '://' + endpoint + ':' + port + '/api/vms/';

        Zabbix.log(4, '[API HealthCheck] URL constru√≠da: ' + this.params.full_url);
    },

    checkApi: function() {
        var req = new HttpRequest();
        try {
            var response = req.get(this.params.full_url);
            var status = req.getStatus();

            Zabbix.log(4, '[API HealthCheck] Status HTTP: ' + status);
            Zabbix.log(4, '[API HealthCheck] Resposta: ' + response);

            if (status === 200) {
                return { status: status, data: 'Site online' };
            } else {
                return { status: status, data: 'Resposta inv√°lida ou status diferente de 200' };
            }
        } catch (e) {
            var status = (typeof req.getStatus === 'function') ? req.getStatus() : -1;
            Zabbix.log(3, '[API HealthCheck] Erro na requisi√ß√£o: ' + String(e));
            return { status: status, data: null, error: String(e) };
        }
    }
};

try {
    Zabbix.log(4, '[API HealthCheck] Valor recebido: ' + value);
    ApiHealthCheck.setParams(JSON.parse(value));
    var result = ApiHealthCheck.checkApi();
    return JSON.stringify(result);
} catch (error) {
    Zabbix.log(3, '[API HealthCheck] Erro geral: ' + error);
    return JSON.stringify({ status: -1, data: null, error: String(error) });
}</params>
                    <description>Item: Get Errors
Este item realiza a captura e monitoramento dos erros retornados pela API REST do VMware Workstation 17 Pro durante as requisi√ß√µes de coleta de dados. Ele verifica respostas de erro HTTP ou mensagens espec√≠ficas de falhas no acesso √†s informa√ß√µes das m√°quinas virtuais.

Ao identificar c√≥digos de erro ou falhas na comunica√ß√£o, o item registra essas informa√ß√µes para alertar o administrador, facilitando a r√°pida identifica√ß√£o e resolu√ß√£o de problemas no ambiente monitorado.

üìò Template: VMware Workstation 17 Pro by HTTP
Autor: Magno M. Cerqueira
Data de cria√ß√£o: 11/07/2025
Vers√£o: 1.0

Curso relacionado:
üéì Zabbix 7.0 Academy: Monitoring Veeam backup from basic to advanced
URL do curso: https://go.hotmart.com/C92709578Y?dp=1</description>
                    <valuemap>
                        <name>Get rest api error status</name>
                    </valuemap>
                    <preprocessing>
                        <step>
                            <type>JSONPATH</type>
                            <parameters>
                                <parameter>$.status</parameter>
                            </parameters>
                        </step>
                    </preprocessing>
                    <timeout>{$VWP.DATA.TIMEOUT}</timeout>
                    <parameters>
                        <parameter>
                            <name>api_endpoint</name>
                            <value>{$VWP.API.URL}</value>
                        </parameter>
                        <parameter>
                            <name>api_port</name>
                            <value>{$VWP.API.PORT}</value>
                        </parameter>
                        <parameter>
                            <name>status_schema</name>
                            <value>{$VWP.STATUS.SCHEME}</value>
                        </parameter>
                    </parameters>
                    <tags>
                        <tag>
                            <tag>component</tag>
                            <value>raw</value>
                        </tag>
                    </tags>
                    <triggers>
                        <trigger>
                            <uuid>a33fe3e7cfd24ad0b01a210cd6efcac0</uuid>
                            <expression>last(/VMware Workstation 17 Pro by HTTP/veeam.get.erros,#2)&lt;&gt;200</expression>
                            <name>VMware Workstation Pro: There are errors in requests to API</name>
                            <opdata>{ITEM.LASTVALUE1}</opdata>
                            <priority>AVERAGE</priority>
                            <description>Trigger: VMware Workstation Pro - Erros nas requisi√ß√µes √† API
Descri√ß√£o:
Este trigger dispara um alerta sempre que forem detectados erros nas requisi√ß√µes feitas √† API REST do VMware Workstation Pro. Erros podem indicar problemas de comunica√ß√£o, indisponibilidade do servi√ßo, ou falhas na autentica√ß√£o, afetando a coleta de dados e o monitoramento das m√°quinas virtuais.

√â fundamental investigar a causa do erro para garantir a integridade e a continuidade do monitoramento da infraestrutura virtualizada.

üìò Template: VMware Workstation 17 Pro by HTTP
Autor: Magno M. Cerqueira
Data de cria√ß√£o: 11/07/2025
Vers√£o: 1.0

Curso relacionado:
üéì Zabbix 7.0 Academy: Monitoring Veeam backup from basic to advanced
URL do curso: https://go.hotmart.com/C92709578Y?dp=1</description>
                            <tags>
                                <tag>
                                    <tag>scope</tag>
                                    <value>availability</value>
                                </tag>
                            </tags>
                        </trigger>
                    </triggers>
                </item>
                <item>
                    <uuid>aedf4cc856c84ef5995801dbaae73d61</uuid>
                    <name>Get metrics</name>
                    <type>HTTP_AGENT</type>
                    <key>veeam.get.metrics</key>
                    <history>0</history>
                    <value_type>TEXT</value_type>
                    <trends>0</trends>
                    <description>Item: Get Metrics
Este item realiza uma requisi√ß√£o √† API REST do VMware Workstation 17 Pro para obter os dados das m√°quinas virtuais em formato JSON. Atrav√©s de uma chamada HTTP ao endpoint configurado (ex: /api/vms/), o item coleta informa√ß√µes detalhadas como o estado de energia, quantidade de CPUs, mem√≥ria alocada e nomes das VMs.

Os dados recebidos s√£o processados para alimentar os itens de monitoramento no Zabbix, permitindo uma vis√£o atualizada e automatizada do ambiente virtual, sem a necessidade de agentes adicionais.


üìò Template: VMware Workstation 17 Pro by HTTP
Autor: Magno M. Cerqueira
Data de cria√ß√£o: 11/07/2025
Vers√£o: 1.0

Curso relacionado:
üéì Zabbix 7.0 Academy: Monitoring Veeam backup from basic to advanced
URL do curso: https://go.hotmart.com/C92709578Y?dp=1</description>
                    <timeout>{$VWP.DATA.TIMEOUT}</timeout>
                    <url>{$VWP.STATUS.SCHEME}://{$VWP.API.URL}:{$VWP.API.PORT}/api/vms/</url>
                    <tags>
                        <tag>
                            <tag>component</tag>
                            <value>raw</value>
                        </tag>
                    </tags>
                </item>
                <item>
                    <uuid>3ede7d3a0cc24163844858b3a02918f1</uuid>
                    <name>Get Count VMs</name>
                    <type>DEPENDENT</type>
                    <key>vwp.get.count.vms</key>
                    <delay>0</delay>
                    <history>0</history>
                    <value_type>TEXT</value_type>
                    <trends>0</trends>
                    <description>Item: Get Count VMs
Este item realiza a coleta e contagem das m√°quinas virtuais (VMs) ativas no VMware Workstation 17 Pro via API REST. Atrav√©s de chamadas √† API, o item obt√©m o JSON com o estado das VMs, identificando o total, quantas est√£o ligadas (poweredOn) e quantas est√£o desligadas (poweredOff).

Essa informa√ß√£o √© essencial para o monitoramento da infraestrutura, permitindo controle preciso e visibilidade do ambiente virtualizado em tempo real.

üìò Template: VMware Workstation 17 Pro by HTTP
Autor: Magno M. Cerqueira
Data de cria√ß√£o: 11/07/2025
Vers√£o: 1.0

Curso relacionado:
üéì Zabbix 7.0 Academy: Monitoring Veeam backup from basic to advanced
URL do curso: https://go.hotmart.com/C92709578Y?dp=1</description>
                    <preprocessing>
                        <step>
                            <type>JAVASCRIPT</type>
                            <parameters>
                                <parameter>var VmStatusCounter = {
    countTotal: 0,
    countOnline: 0,
    countOffline: 0,

    parseData: function(value) {
        var dataObj;
        try {
            dataObj = JSON.parse(value);
        } catch (e) {
            throw 'Erro ao analisar JSON: ' + e.message;
        }

        var vms = dataObj.vms_workstation &amp;&amp; dataObj.vms_workstation.data;
        if (!vms || !vms.length) {
            throw 'Formato do JSON inv√°lido ou aus√™ncia de lista de VMs.';
        }

        this.countTotal = vms.length;

        var online = 0;
        var offline = 0;
        for (var i = 0; i &lt; vms.length; i++) {
            if (vms[i].Power === 'poweredOn') {
                online++;
            } else if (vms[i].Power === 'poweredOff') {
                offline++;
            }
        }

        this.countOnline = online;
        this.countOffline = offline;

        return {
            total: this.countTotal,
            online: this.countOnline,
            offline: this.countOffline
        };
    }
};

try {
    var result = VmStatusCounter.parseData(value);
    return JSON.stringify(result);
} catch (error) {
    return JSON.stringify({ error: error });
}
</parameter>
                            </parameters>
                        </step>
                    </preprocessing>
                    <master_item>
                        <key>veeam.get.metrics</key>
                    </master_item>
                    <tags>
                        <tag>
                            <tag>component</tag>
                            <value>raw</value>
                        </tag>
                    </tags>
                </item>
            </items>
            <discovery_rules>
                <discovery_rule>
                    <uuid>98dac49c276b4fdfad4c7f9f1e9787d6</uuid>
                    <name>VMware VMs discovery</name>
                    <type>DEPENDENT</type>
                    <key>vmware.vm.discovery</key>
                    <delay>0</delay>
                    <description>Este discovery autom√°tico que identifica todas as m√°quinas virtuais (VMs) em execu√ß√£o ou desligadas no ambiente VMware Workstation Pro utilizando a API REST. Atrav√©s desse discovery, o Zabbix coleta informa√ß√µes como ID, nome e status das VMs, possibilitando monitoramento cont√≠nuo, cria√ß√£o din√¢mica de itens e triggers para cada VM detectada.

Esta funcionalidade garante que o invent√°rio das m√°quinas virtuais esteja sempre atualizado, facilitando a gest√£o e a supervis√£o da infraestrutura virtual.</description>
                    <item_prototypes>
                        <item_prototype>
                            <uuid>fcfa1f0d40b44cf19281e5b66d6bc045</uuid>
                            <name>CPU</name>
                            <type>DEPENDENT</type>
                            <key>vmware.vm.cpu[&quot;{#VWP_VM_ID}&quot;]</key>
                            <delay>0</delay>
                            <units>!Core</units>
                            <description>Este item coleta a quantidade de CPUs virtuais alocadas para cada m√°quina virtual (VM) no ambiente VMware Workstation Pro, utilizando a API REST. A informa√ß√£o obtida permite monitorar a configura√ß√£o da VM, identificar poss√≠veis necessidades de ajuste de recursos e auxiliar na an√°lise de desempenho das m√°quinas virtuais.

üìò Template: VMware Workstation 17 Pro by HTTP
Autor: Magno M. Cerqueira
Data de cria√ß√£o: 11/07/2025
Vers√£o: 1.0

Curso relacionado:
üéì Zabbix 7.0 Academy: Monitoring Veeam backup from basic to advanced
URL do curso: https://go.hotmart.com/C92709578Y?dp=1</description>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <parameters>
                                        <parameter>$.vms_workstation.data[?(@.Id==&quot;{#VWP_VM_ID}&quot;)].CPU.first()</parameter>
                                    </parameters>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>veeam.get.metrics</key>
                            </master_item>
                            <tags>
                                <tag>
                                    <tag>component</tag>
                                    <value>VMs</value>
                                </tag>
                                <tag>
                                    <tag>VMs</tag>
                                    <value>{#VWP_VM_NAME}</value>
                                </tag>
                            </tags>
                        </item_prototype>
                        <item_prototype>
                            <uuid>7e7b4107f44543bba888a3d9ff230c91</uuid>
                            <name>Id</name>
                            <type>DEPENDENT</type>
                            <key>vmware.vm.id[&quot;{#VWP_VM_ID}&quot;]</key>
                            <delay>0</delay>
                            <value_type>CHAR</value_type>
                            <trends>0</trends>
                            <description>Este item coleta o identificador √∫nico (ID) de cada m√°quina virtual (VM) gerenciada pelo VMware Workstation Pro atrav√©s da API REST. O ID √© essencial para diferenciar e referenciar cada VM de forma exclusiva dentro do ambiente monitorado, facilitando a integra√ß√£o, o controle e o gerenciamento das VMs no Zabbix.

üìò Template: VMware Workstation 17 Pro by HTTP
Autor: Magno M. Cerqueira
Data de cria√ß√£o: 11/07/2025
Vers√£o: 1.0

Curso relacionado:
üéì Zabbix 7.0 Academy: Monitoring Veeam backup from basic to advanced
URL do curso: https://go.hotmart.com/C92709578Y?dp=1</description>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <parameters>
                                        <parameter>$.vms_workstation.data[?(@.Id==&quot;{#VWP_VM_ID}&quot;)].Id.first()</parameter>
                                    </parameters>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>veeam.get.metrics</key>
                            </master_item>
                            <tags>
                                <tag>
                                    <tag>component</tag>
                                    <value>VMs</value>
                                </tag>
                                <tag>
                                    <tag>VMs</tag>
                                    <value>{#VWP_VM_NAME}</value>
                                </tag>
                            </tags>
                        </item_prototype>
                        <item_prototype>
                            <uuid>9c77de98e9d24a3088a495cc496d2842</uuid>
                            <name>Memory</name>
                            <type>DEPENDENT</type>
                            <key>vmware.vm.memory[&quot;{#VWP_VM_ID}&quot;]</key>
                            <delay>0</delay>
                            <units>B</units>
                            <description>Este item coleta a quantidade de mem√≥ria RAM alocada para cada m√°quina virtual (VM) gerenciada pelo VMware Workstation Pro via API REST. O valor √© apresentado em bytes e representa a capacidade de mem√≥ria dispon√≠vel para a VM, permitindo monitoramento do uso e planejamento de recursos.

üìò Template: VMware Workstation 17 Pro by HTTP
Autor: Magno M. Cerqueira
Data de cria√ß√£o: 11/07/2025
Vers√£o: 1.0

Curso relacionado:
üéì Zabbix 7.0 Academy: Monitoring Veeam backup from basic to advanced
URL do curso: https://go.hotmart.com/C92709578Y?dp=1</description>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <parameters>
                                        <parameter>$.vms_workstation.data[?(@.Id==&quot;{#VWP_VM_ID}&quot;)].MemoryBytes.first()</parameter>
                                    </parameters>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>veeam.get.metrics</key>
                            </master_item>
                            <tags>
                                <tag>
                                    <tag>component</tag>
                                    <value>VMs</value>
                                </tag>
                                <tag>
                                    <tag>VMs</tag>
                                    <value>{#VWP_VM_NAME}</value>
                                </tag>
                            </tags>
                        </item_prototype>
                        <item_prototype>
                            <uuid>e673b752873645e48f41aae7715c7e3a</uuid>
                            <name>Status: {#VWP_VM_NAME}</name>
                            <type>DEPENDENT</type>
                            <key>vmware.vm.power[&quot;{#VWP_VM_ID}&quot;]</key>
                            <delay>0</delay>
                            <description>Este item monitora o estado de energia de cada m√°quina virtual (VM) no VMware Workstation Pro utilizando a API REST. Os poss√≠veis valores indicam se a VM est√° ligada (poweredOn) ou desligada (poweredOff), permitindo o acompanhamento em tempo real do status operacional das VMs.

üìò Template: VMware Workstation 17 Pro by HTTP
Autor: Magno M. Cerqueira
Data de cria√ß√£o: 11/07/2025
Vers√£o: 1.0

Curso relacionado:
üéì Zabbix 7.0 Academy: Monitoring Veeam backup from basic to advanced
URL do curso: https://go.hotmart.com/C92709578Y?dp=1</description>
                            <valuemap>
                                <name>VMware VMs Power Status</name>
                            </valuemap>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <parameters>
                                        <parameter>$.vms_workstation.data[?(@.Id==&quot;{#VWP_VM_ID}&quot;)].Power.first()</parameter>
                                    </parameters>
                                </step>
                                <step>
                                    <type>JAVASCRIPT</type>
                                    <parameters>
                                        <parameter>try {
    var power = value.trim();

    if (power === &quot;poweredOn&quot;) {
        return 0;
    } else if (power === &quot;poweredOff&quot;) {
        return 1;
    } else {
        return -1;  // Valor inesperado
    }
} catch (error) {
    return -1;
}
</parameter>
                                    </parameters>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>veeam.get.metrics</key>
                            </master_item>
                            <tags>
                                <tag>
                                    <tag>component</tag>
                                    <value>VMs</value>
                                </tag>
                                <tag>
                                    <tag>Status VMs</tag>
                                    <value>{#VWP_VM_POWER}</value>
                                </tag>
                                <tag>
                                    <tag>VMs</tag>
                                    <value>{#VWP_VM_NAME}</value>
                                </tag>
                            </tags>
                            <trigger_prototypes>
                                <trigger_prototype>
                                    <uuid>5ef6b85bfe924822aa2ee192ab4ffff7</uuid>
                                    <expression>last(/VMware Workstation 17 Pro by HTTP/vmware.vm.power[&quot;{#VWP_VM_ID}&quot;],#2)&lt;&gt;0</expression>
                                    <name>The VMware &quot;{#VWP_VM_NAME}&quot; Power Off</name>
                                    <priority>HIGH</priority>
                                    <description>Dispara um alerta sempre que a m√°quina virtual &quot;{#VWP_VM_NAME}&quot; estiver desligada, indicando que a VM n√£o est√° operacional. Esse monitoramento √© √∫til para detectar quedas n√£o planejadas de VMs ou desligamentos n√£o autorizados.

üìò Template: VMware Workstation 17 Pro by HTTP
Autor: Magno M. Cerqueira
Data de cria√ß√£o: 11/07/2025
Vers√£o: 1.0

Curso relacionado:
üéì Zabbix 7.0 Academy: Monitoring Veeam backup from basic to advanced
URL do curso: https://go.hotmart.com/C92709578Y?dp=1</description>
                                </trigger_prototype>
                            </trigger_prototypes>
                        </item_prototype>
                    </item_prototypes>
                    <master_item>
                        <key>veeam.get.metrics</key>
                    </master_item>
                    <preprocessing>
                        <step>
                            <type>JAVASCRIPT</type>
                            <parameters>
                                <parameter>try {
    var parsed = JSON.parse(value);
    var vms = parsed.vms_workstation.data;
    var output = [];

    for (var i = 0; i &lt; vms.length; i++) {
        output.push({
            &quot;{#VWP_VM_ID}&quot;: vms[i].Id,
            &quot;{#VWP_VM_NAME}&quot;: vms[i].Name,
            &quot;{#VWP_VM_POWER}&quot;: vms[i].Power
        });
    }

    return JSON.stringify({ data: output });
} catch (e) {
    return JSON.stringify({ error: &quot;Erro ao processar JSON: &quot; + e.toString() });
}
</parameter>
                            </parameters>
                        </step>
                    </preprocessing>
                </discovery_rule>
                <discovery_rule>
                    <uuid>f1d3ee4f76434d1586660fd5b55c8701</uuid>
                    <name>VMs count discovery</name>
                    <type>DEPENDENT</type>
                    <key>vwp.vm.count.discovery</key>
                    <delay>0</delay>
                    <description>Este discovery autom√°tico identifica e lista todas as m√°quinas virtuais (VMs) gerenciadas pelo VMware Workstation Pro via API REST. Ele coleta os dados de identifica√ß√£o, nome e status (ligada/desligada) de cada VM para permitir monitoramento din√¢mico e atualizado da infraestrutura virtual.

Com essa descoberta, √© poss√≠vel manter o invent√°rio das VMs sempre sincronizado, facilitando a cria√ß√£o autom√°tica de itens, triggers e gr√°ficos no Zabbix para cada m√°quina detectada.</description>
                    <item_prototypes>
                        <item_prototype>
                            <uuid>7de49e1cdeed4b3fa2fed7d18d76c2f6</uuid>
                            <name>VMs {#VWP.VMS.COUNT.NAME}</name>
                            <type>DEPENDENT</type>
                            <key>vwp.vms.count[&quot;{#VWP.VMS.COUNT.NAME}&quot;]</key>
                            <delay>0</delay>
                            <preprocessing>
                                <step>
                                    <type>JSONPATH</type>
                                    <parameters>
                                        <parameter>$.{#VWP.VMS.COUNT.NAME}</parameter>
                                    </parameters>
                                </step>
                            </preprocessing>
                            <master_item>
                                <key>vwp.get.count.vms</key>
                            </master_item>
                            <tags>
                                <tag>
                                    <tag>VMs count</tag>
                                    <value>{#VWP.VMS.COUNT.NAME}</value>
                                </tag>
                            </tags>
                        </item_prototype>
                    </item_prototypes>
                    <master_item>
                        <key>vwp.get.count.vms</key>
                    </master_item>
                    <preprocessing>
                        <step>
                            <type>JAVASCRIPT</type>
                            <parameters>
                                <parameter>// Converte a string JSON recebida pelo Zabbix em objeto
var parsed = JSON.parse(value);

// Inicializa array para armazenar os nomes
var output = [];

// Itera sobre as chaves do objeto JSON original
for (var key in parsed) {
    if (parsed.hasOwnProperty(key)) {
        output.push({ &quot;{#VWP.VMS.COUNT.NAME}&quot;: key });
    }
}

// Retorna o JSON formatado para LLD
return JSON.stringify({ data: output });
</parameter>
                            </parameters>
                        </step>
                    </preprocessing>
                </discovery_rule>
            </discovery_rules>
            <macros>
                <macro>
                    <macro>{$VWP.API.PORT}</macro>
                    <value>8080</value>
                    <description>VMware API port.</description>
                </macro>
                <macro>
                    <macro>{$VWP.API.URL}</macro>
                    <value>&lt;PUT YOUR IP HOST&gt;</value>
                    <description>VMware Workstation Pro service (hypervisor) REST AI IP (192.168.1.100).</description>
                </macro>
                <macro>
                    <macro>{$VWP.DATA.TIMEOUT}</macro>
                    <value>60s</value>
                    <description>A response timeout for the API.</description>
                </macro>
                <macro>
                    <macro>{$VWP.STATUS.SCHEME}</macro>
                    <value>http</value>
                    <description>VMware API scheme.</description>
                </macro>
            </macros>
            <valuemaps>
                <valuemap>
                    <uuid>fac56077cbb54eac9af57b72707e23ba</uuid>
                    <name>Get rest api error status</name>
                    <mappings>
                        <mapping>
                            <value>200</value>
                            <newvalue>Online</newvalue>
                        </mapping>
                    </mappings>
                </valuemap>
                <valuemap>
                    <uuid>9f77b925038446778e5c71499b075634</uuid>
                    <name>VMware VMs Power Status</name>
                    <mappings>
                        <mapping>
                            <value>1</value>
                            <newvalue>poweredOff</newvalue>
                        </mapping>
                        <mapping>
                            <value>0</value>
                            <newvalue>poweredOn</newvalue>
                        </mapping>
                    </mappings>
                </valuemap>
            </valuemaps>
        </template>
    </templates>
</zabbix_export>
