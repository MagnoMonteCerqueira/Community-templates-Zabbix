{
  "__inputs": [
    {
      "name": "DS_ZABBIX",
      "label": "zabbix",
      "description": "",
      "type": "datasource",
      "pluginId": "alexanderzobnin-zabbix-datasource",
      "pluginName": "Zabbix"
    }
  ],
  "__elements": {},
  "__requires": [
    {
      "type": "datasource",
      "id": "alexanderzobnin-zabbix-datasource",
      "name": "Zabbix",
      "version": "5.2.0"
    },
    {
      "type": "panel",
      "id": "gapit-htmlgraphics-panel",
      "name": "HTML graphics",
      "version": "2.2.1"
    },
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "12.0.2"
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ZABBIX}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 1,
        "w": 2,
        "x": 0,
        "y": 0
      },
      "id": 4,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "",
        "onInit": "",
        "onInitOnResize": false,
        "onRender": "",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": ":root {\r\n  /* Removi a variável da imagem, não será mais usada */\r\n}\r\n\r\nbody::before {\r\n  content: \"\";\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n\r\n  background-color: #0f1129; /* Fundo azul escuro sólido */\r\n  \r\n  /* Removi background-image, background-size, repeat e position pois não são necessários para cor sólida */\r\n  \r\n  /* Removi filtro blur, não é necessário para cor sólida */\r\n\r\n  z-index: -1;\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: Arial, sans-serif;\r\n  color: white;\r\n  position: relative;\r\n  z-index: 1;\r\n}\r\n",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.2.1",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": ""
          },
          "host": {
            "filter": ""
          },
          "item": {
            "filter": ""
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          },
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          }
        }
      ],
      "title": "Trocar fundo",
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ZABBIX}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 5,
        "w": 24,
        "x": 0,
        "y": 1
      },
      "id": 1,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "",
        "onInit": "",
        "onInitOnResize": false,
        "onRender": "/********************************************************************************************\n * Curso: https://go.hotmart.com/C92709578Y?dp=1\n * Script de Memoria - Painel Grafana Customizado\n * Autor: Magno M Cerqueira\n * Data: 2025-07-14\n * Descrição:\n *   Painel que exibe Totla Memoria, memoria utilizada e ainda tem algumas firulas das VMS do \n * Hypervisor VMware Workstation Pro V17\n ********************************************************************************************/\n (() => { // Função autoexecutável que isola o escopo para não poluir o global\n\n  if (!htmlNode) return; // Se o elemento htmlNode não estiver definido, interrompe a execução\n\n  const lateralPadding = '10px'; // Define o padding lateral da área do banner\n\n  // Define o conteúdo HTML e CSS da interface do banner\n  htmlNode.innerHTML = `\n    <style>\n      /* Envolve todo o banner e aplica padding lateral */\n      .banner-wrapper {\n        width: 100%;\n        padding-left: ${lateralPadding};\n        padding-right: ${lateralPadding};\n        box-sizing: border-box;\n      }\n\n      /* Container principal do banner com layout horizontal */\n      .banner-container {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        background-color: #0f1129; /* Fundo escuro */\n        color: white;\n        font-family: 'Arial', sans-serif;\n        padding: 10px 24px;\n        width: 100%;\n        flex-wrap: nowrap;\n        gap: 40px; /* Espaçamento entre elementos filhos */\n        box-sizing: border-box;\n      }\n\n      /* Agrupa logo e texto à esquerda do banner */\n      .logo-bar-group {\n        display: flex;\n        align-items: center;\n        gap: 20px;\n        white-space: nowrap; /* Evita quebra de linha */\n      }\n\n      /* Área da logo \"VMWARE WORK\" */\n      .logo-area {\n        font-size: clamp(2rem, 4vw, 2.8rem); /* Responsivo */\n        font-weight: bold;\n        letter-spacing: 2px;\n        display: flex;\n        align-items: center;\n        color: white;\n      }\n\n      /* Texto principal da logo */\n      .logo-text {\n        font-weight: 100;\n        font-size: clamp(6rem, 4vw, 2.8rem); /* Responsivo */\n      }\n\n      /* Parte menor da logo (V17) exibida em colunas */\n      .logo-noc {\n        font-size: 0.4em;\n        display: inline-flex;\n        flex-direction: column;\n        line-height: 1;\n        margin-left: 5px;\n      }\n\n      /* Barra vertical separadora ao lado da logo */\n      .separator {\n        width: 5px;\n        height: 110px;\n        background: linear-gradient(180deg, #00f5ff, #006f8c);\n        border-top-left-radius: 20px;\n        border-bottom-left-radius: 20px;\n        border-top-right-radius: 2px;\n        border-bottom-right-radius: 2px;\n        flex-shrink: 0; /* Impede redução automática */\n      }\n\n      /* Área de texto ao lado da logo */\n      .text-inside-bar {\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        text-align: left;\n        max-width: 500px;\n      }\n\n      /* Aplica animação nos elementos abaixo */\n      .title,\n      .description1,\n      .description2 {\n        animation: fadeUp 30s ease-in-out infinite;\n        opacity: 0; /* Inicia invisível */\n      }\n\n      /* Atraso na animação da primeira descrição */\n      .description1 {\n        animation-delay: 2s;\n      }\n\n      /* Atraso maior na segunda descrição */\n      .description2 {\n        animation-delay: 4s;\n      }\n\n      /* Animação de \"fade\" com leve movimento vertical */\n      @keyframes fadeUp {\n        0% {\n          opacity: 0;\n          transform: translateY(10px);\n        }\n        5% {\n          opacity: 1;\n          transform: translateY(0);\n        }\n        95% {\n          opacity: 1;\n          transform: translateY(0);\n        }\n        100% {\n          opacity: 0;\n          transform: translateY(10px);\n        }\n      }\n\n      /* Estilização do título principal do texto */\n      .title {\n        font-size: clamp(1.2rem, 2vw, 1.6rem);\n        font-weight: bold;\n        margin-bottom: 10px;\n        line-height: 1.2;\n        color: white;\n      }\n\n      /* Estilo das descrições */\n      .description1, .description2 {\n        font-size: clamp(0.85rem, 1.5vw, 1rem);\n        color: #ccc;\n        line-height: 1.5;\n        margin: 0;\n      }\n\n      /* Espaçamento extra na primeira descrição */\n      .description1 {\n        margin-bottom: 5px;\n      }\n\n      /* ===== RESPONSIVIDADE ===== */\n      @media (max-width: 1005px) {\n        /* Ajusta o layout do container em telas menores */\n        .banner-container {\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          gap: 20px;\n          padding: 30px 20px;\n        }\n\n        /* Agrupa elementos da logo e barra separadora verticalmente */\n        .logo-bar-group {\n          gap: 10px;\n          justify-content: center;\n          flex-wrap: wrap;\n          white-space: normal;\n        }\n\n        /* Transforma a barra separadora em horizontal */\n        .separator {\n          width: 100%;\n          height: 3px;\n          margin: 20px 0;\n          box-shadow: none;\n          background: #00f5ff;\n        }\n\n        /* Centraliza o texto em telas pequenas */\n        .text-inside-bar {\n          max-width: 100%;\n          text-align: center;\n        }\n\n        .description1, .description2 {\n          text-align: center;\n        }\n\n        .logo-area {\n          justify-content: center;\n        }\n      }\n    </style>\n\n    <!-- Estrutura visual do banner -->\n    <div class=\"banner-wrapper\">\n      <div class=\"banner-container\">\n        <div class=\"logo-bar-group\">\n          <!-- Exibe a logo principal -->\n          <div class=\"logo-area\">\n            <span class=\"logo-text\">VMWARE WORK</span>\n            <span class=\"logo-noc\">\n              <span>V</span>\n              <span>1</span>\n              <span>7</span>\n            </span>\n          </div>\n\n          <!-- Barra separadora -->\n          <div class=\"separator\"></div>\n\n          <!-- Texto com título e descrições -->\n          <div class=\"text-inside-bar\">\n            <div class=\"title\">PAINEL VISÃO MACRO VMWARE WORKSTATION PRO</div>\n            <div class=\"description1\">\n              Painel para a equipe de infraestrutura monitorar performance, disponibilidade e integridade dos servidores\n            </div>\n            <div class=\"description2\">\n               VMware, Permite acompanhar backups, detectar falhas e garantir a segurança dos dados no ambiente.\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n})(); // Fim da função autoexecutável\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.2.1",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": ""
          },
          "host": {
            "filter": ""
          },
          "item": {
            "filter": ""
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          },
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          }
        }
      ],
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ZABBIX}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 4,
        "w": 24,
        "x": 0,
        "y": 6
      },
      "id": 5,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "",
        "onInit": "",
        "onInitOnResize": false,
        "onRender": "/********************************************************************************************\n * Curso: https://go.hotmart.com/C92709578Y?dp=1\n * Script de Memoria - Painel Grafana Customizado\n * Autor: Magno M Cerqueira\n * Data: 2025-07-14\n * Descrição:\n *   Painel que exibe Totla Memoria, memoria utilizada e ainda tem algumas firulas das VMS do \n * Hypervisor VMware Workstation Pro V17\n ********************************************************************************************/\n(() => { // Função auto-executável anônima\n\n  if (!htmlNode || !data || !data.series) return; // Se o elemento HTML ou os dados não existirem, interrompe a execução\n\n  // Função para pegar o último valor de uma série específica\n  const getLastValue = (seriesName, fieldType = 'number') => {\n    const series = data.series.find(s => s.name === seriesName); // Procura a série pelo nome\n    if (!series) return null; // Se não encontrar, retorna null\n    const field = series.fields.find(f => f.type === fieldType); // Procura o campo do tipo especificado\n    if (!field || field.values.length === 0) return null; // Se não houver valores, retorna null\n    return field.values.get(field.values.length - 1); // Retorna o último valor do campo\n  };\n\n  // Formata valor percentual com 2 casas decimais\n  const formatPct = val => `${val.toFixed(2)} %`;\n\n  // Converte valor de bytes para gigabytes e formata\n  const formatGB = val => `${(val / 1024 ** 3).toFixed(2)} GB`;\n\n  // Converte valor de bits para Mbps e formata\n  const formatMbps = val => `${(val / 1_000_000).toFixed(2)} Mbps`;\n\n  // Retorna uma cor com base no valor\n  const getColor = value => {\n    if (value > 80) return '#f44336'; // vermelho\n    if (value > 60) return '#ffeb3b'; // amarelo\n    return '#00e676'; // verde\n  };\n\n  // Adiciona classe de piscar se o valor for alto\n  const getBlinkClass = val => val > 80 ? 'pulse' : '';\n\n  // Converte segundos para o formato hh:mm:ss\n  const formatUptime = seconds => {\n    const hrs = String(Math.floor(seconds / 3600)).padStart(2, '0');\n    const mins = String(Math.floor((seconds % 3600) / 60)).padStart(2, '0');\n    const secs = String(Math.floor(seconds % 60)).padStart(2, '0');\n    return `${hrs}:${mins}:${secs}`;\n  };\n\n  // Coleta os dados das métricas\n  const systemName = getLastValue('Host name of Zabbix agent running', 'string') ?? 'Sem Nome';\n  const cpu = Number(getLastValue('CPU utilization')) || 0;\n  const memoryPct = Number(getLastValue('Memory utilization')) || 0;\n  const memoryTotal = getLastValue('Total memory') ?? 1;\n  const diskUsedRaw = getLastValue('Space Utilization') ?? 0;\n  const diskUsedPct = Number(diskUsedRaw);\n  const safeDiskUsedPct = isNaN(diskUsedPct) ? 0 : diskUsedPct;\n  const diskTotal = getLastValue('FS [(C:)]: Space: Total') ?? 1;\n  const cores = getLastValue('Number of CPUs') ?? '-';\n  const uptime = getLastValue('System uptime') ?? 0;\n  const bitsIn = getLastValue('Interface Realtek PCIe GbE Family Controller(Ethernet): Bits received') ?? 0;\n  const bitsOut = getLastValue('Interface Realtek PCIe GbE Family Controller(Ethernet): Bits sent') ?? 0;\n\n  // Formata valores para exibição\n  const memoryTotalText = formatGB(memoryTotal);\n  const diskTotalText = formatGB(diskTotal);\n  const bitsInPct = Math.min((bitsIn / 100_000_000) * 100, 100); // Percentual de entrada\n  const bitsOutPct = Math.min((bitsOut / 100_000_000) * 100, 100); // Percentual de saída\n\n  // Define o conteúdo HTML da visualização\n  htmlNode.innerHTML = `\n    <style>\n      .card-table-fixed-wrapper {\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        z-index: 9999;\n        background: #15171c;\n      }\n\n      .card-table {\n        font-family: \"Inter\", sans-serif;\n        font-size: 14px;\n        width: 100%;\n        background: #15171c;\n        color: #fff;\n        border-radius: 6px;\n        overflow: hidden;\n      }\n\n      .card-header, .card-row {\n        display: grid;\n        grid-template-columns: repeat(11, 1fr);\n        text-align: center;\n        align-items: center;\n      }\n\n      .card-header {\n        background: #1d1f24;\n        color: #aaa;\n        font-weight: 600;\n        padding: 12px 0;\n        font-size: 13px;\n        text-transform: uppercase;\n      }\n\n      .card-row {\n        background: #15171c;\n        padding: 14px 0;\n        border-top: 1px solid #2a2a2a;\n      }\n\n      .value {\n        font-weight: 500;\n        font-size: 13px;\n        margin-bottom: 4px;\n        color: #f0f0f0;\n      }\n\n      .status-online {\n        color: #00e676;\n        font-weight: bold;\n      }\n\n      .bar-container {\n        background: #3a3a3a;\n        border-radius: 6px;\n        height: 8px;\n        width: 75%;\n        margin: 0 auto;\n        overflow: hidden;\n      }\n\n      .bar {\n        height: 100%;\n        border-radius: 6px;\n        transition: width 0.4s ease;\n      }\n\n      .pulse {\n        animation: pulse-glow 1s infinite;\n      }\n\n      @keyframes pulse-glow {\n        0% { box-shadow: 0 0 0px rgba(255, 0, 0, 0.3); }\n        50% { box-shadow: 0 0 12px rgba(255, 0, 0, 0.7); }\n        100% { box-shadow: 0 0 0px rgba(255, 0, 0, 0.3); }\n      }\n    </style>\n\n    <div class=\"card-table-fixed-wrapper\">\n      <div class=\"card-table\">\n        <div class=\"card-header\">\n          <div>Hypervisors</div>\n          <div>STATUS</div>\n          <div>NUMBER OF CORES</div>\n          <div>CPU USAGE IN %</div>\n          <div>MEMORY USAGE</div>\n          <div>TOTAL MEMORY</div>\n          <div>DISK SIZE</div>\n          <div>DISK USED</div>\n          <div>UPTIME</div>\n          <div>IN</div>\n          <div>OUT</div>\n        </div>\n\n        <div class=\"card-row\">\n          <div><div class=\"value\">${systemName}</div></div>\n          <div><div class=\"value status-online\">Online</div></div>\n          <div><div class=\"value\">${cores}</div></div>\n\n          <div>\n            <div class=\"value\">${formatPct(cpu)}</div>\n            <div class=\"bar-container\">\n              <div class=\"bar ${getBlinkClass(cpu)}\" style=\"width:${cpu}%; background-color: ${getColor(cpu)};\"></div>\n            </div>\n          </div>\n\n          <div>\n            <div class=\"value\">${formatPct(memoryPct)}</div>\n            <div class=\"bar-container\">\n              <div class=\"bar ${getBlinkClass(memoryPct)}\" style=\"width:${memoryPct}%; background-color: ${getColor(memoryPct)};\"></div>\n            </div>\n          </div>\n\n          <div><div class=\"value\">${memoryTotalText}</div></div>\n          <div><div class=\"value\">${diskTotalText}</div></div>\n\n          <div>\n            <div class=\"value\">${formatPct(safeDiskUsedPct)}</div>\n            <div class=\"bar-container\">\n              <div class=\"bar ${getBlinkClass(safeDiskUsedPct)}\" style=\"width:${Math.round(safeDiskUsedPct)}%; background-color: ${getColor(safeDiskUsedPct)};\"></div>\n            </div>\n          </div>\n\n          <div><div class=\"value\">${formatUptime(uptime)}</div></div>\n\n          <div>\n            <div class=\"value\">${formatMbps(bitsIn)}</div>\n            <div class=\"bar-container\">\n              <div class=\"bar ${getBlinkClass(bitsInPct)}\" style=\"width:${bitsInPct}%; background-color: #2196F3;\"></div>\n            </div>\n          </div>\n\n          <div>\n            <div class=\"value\">${formatMbps(bitsOut)}</div>\n            <div class=\"bar-container\">\n              <div class=\"bar ${getBlinkClass(bitsOutPct)}\" style=\"width:${bitsOutPct}%; background-color: #FF9800;\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `;\n})(); // Fim da função auto-executável\n\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.2.1",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "/.*/"
          },
          "item": {
            "filter": "Host name of Zabbix agent running"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          },
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "/.*/"
          },
          "item": {
            "filter": "CPU utilization"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "B",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "/.*/"
          },
          "item": {
            "filter": "Memory utilization"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "C",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "/.*/"
          },
          "item": {
            "filter": "Total memory"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "D",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "/.*/"
          },
          "item": {
            "filter": "Number of CPUs"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "E",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "/.*/"
          },
          "item": {
            "filter": "System uptime"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "F",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "/.*/"
          },
          "item": {
            "filter": "FS [(C:)]: Space: Total"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "G",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "/.*/"
          },
          "item": {
            "filter": "Space Utilization"
          },
          "itemTag": {
            "filter": "filesystem: C:"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "H",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "/.*/"
          },
          "item": {
            "filter": "ICMP ping"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "I",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "/.*/"
          },
          "item": {
            "filter": "Interface Realtek PCIe GbE Family Controller(Ethernet): Bits received"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "J",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "/.*/"
          },
          "item": {
            "filter": "Interface Realtek PCIe GbE Family Controller(Ethernet): Bits sent"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "K",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ZABBIX}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 9,
        "w": 4,
        "x": 0,
        "y": 10
      },
      "id": 6,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "",
        "onInit": "",
        "onInitOnResize": false,
        "onRender": "/********************************************************************************************\n * Curso: https://go.hotmart.com/C92709578Y?dp=1\n * Script de Memoria - Painel Grafana Customizado\n * Autor: Magno M Cerqueira\n * Data: 2025-07-14\n * Descrição:\n *   Painel que exibe Totla Memoria, memoria utilizada e ainda tem algumas firulas das VMS do \n * Hypervisor VMware Workstation Pro V17\n ********************************************************************************************/\n (() => {\n  // Verifica se o elemento HTML principal e os dados existem. Se não, encerra a execução.\n  if (!htmlNode || !data || !data.series) return;\n\n  // Função para verificar se os dados estão no formato \"longo\" (long format)\n  const isLongFormat = () => {\n    return data.series.some(series =>\n      series.fields.some(f => ['metric', 'name', '__name__'].includes(f.name))\n    );\n  };\n\n  // Recupera o último valor de um campo no formato \"wide\"\n  const getLastValueWide = (fieldLabel, fieldType = 'number') => {\n    const series = data.series.find(s =>\n      s.fields.some(f => f.name === fieldLabel && f.type === fieldType)\n    );\n    if (!series) return null;\n    const field = series.fields.find(f => f.name === fieldLabel && f.type === fieldType);\n    return field?.values.get(field.values.length - 1) ?? null;\n  };\n\n  // Recupera o último valor de um campo no formato \"long\"\n  const getLastValueLong = (metricName, fieldType = 'number') => {\n    for (const series of data.series) {\n      const metricField = series.fields.find(f =>\n        ['metric', 'name', '__name__'].includes(f.name)\n      );\n      const valueField = series.fields.find(f => f.type === fieldType);\n      if (!metricField || !valueField) continue;\n\n      for (let i = 0; i < metricField.values.length; i++) {\n        if (metricField.values.get(i) === metricName) {\n          return valueField.values.get(i);\n        }\n      }\n    }\n    return null;\n  };\n\n  // Decide qual função usar com base no formato dos dados (long ou wide)\n  const getLastValue = (metricName, fieldType = 'number') =>\n    isLongFormat() ? getLastValueLong(metricName, fieldType) : getLastValueWide(metricName, fieldType);\n\n  // Obtém os valores finais dos indicadores usando os nomes dos campos\n  const totalVMs = getLastValue('Total de VMs') ?? 0;\n  const totalPowerOff = getLastValue('Total Power Off') ?? 0;\n  const totalPowerOn = getLastValue('Total Power On') ?? 0;\n\n  // Cria um círculo SVG para representar visualmente a porcentagem (com base no valor)\n  const createCircle = (value, color) => {\n    const radius = 22;\n    const circumference = 2 * Math.PI * radius;\n    const offset = circumference - (Math.min(value, 100) / 100) * circumference;\n    return `\n      <svg width=\"60\" height=\"60\">\n        <circle cx=\"30\" cy=\"30\" r=\"${radius}\" stroke=\"#222\" stroke-width=\"6\" fill=\"none\" />\n        <circle cx=\"30\" cy=\"30\" r=\"${radius}\" stroke=\"${color}\" stroke-width=\"6\" fill=\"none\"\n          stroke-dasharray=\"${circumference}\" stroke-dashoffset=\"${offset}\" stroke-linecap=\"round\" />\n      </svg>\n    `;\n  };\n\n  // Formata o número para exibição, removendo casas decimais\n  const formatNumber = val => (typeof val === 'number' ? val.toFixed(0) : val);\n\n  // Insere o conteúdo HTML estilizado no elemento htmlNode\n  htmlNode.innerHTML = `\n    <style>\n      /* Importa a fonte Inter */\n      @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');\n\n      /* Estilo geral do card */\n      .neon-card {\n        font-family: 'Inter', sans-serif;\n        background: #15171c;\n        color: #fff;\n        border-radius: 16px;\n        padding: 20px;\n        width: 300px;\n        box-shadow: 0 0 12px rgba(0, 255, 255, 0.1);\n      }\n\n      /* Estilo do título do card */\n      .title {\n        text-align: center;\n        font-size: 16px;\n        font-weight: 600;\n        margin-bottom: 16px;\n        color: #00e5ff;\n      }\n\n      /* Estilo de cada linha de métrica */\n      .metric {\n        display: flex;\n        align-items: center;\n        gap: 12px;\n        margin-bottom: 18px;\n      }\n\n      /* Ícone à esquerda de cada métrica */\n      .icon {\n        font-size: 22px;\n        width: 28px;\n      }\n\n      /* Área de informações da métrica */\n      .info {\n        flex-grow: 1;\n      }\n\n      /* Rótulo de cada métrica */\n      .label {\n        font-size: 13px;\n        color: #ccc;\n      }\n\n      /* Valor numérico da métrica */\n      .value {\n        font-size: 14px;\n        font-weight: bold;\n        color: #fff;\n      }\n\n      /* Rodapé com a hora da última atualização */\n      .footer {\n        text-align: center;\n        font-size: 11px;\n        color: #666;\n        margin-top: 10px;\n      }\n    </style>\n\n    <!-- Início do card com as métricas -->\n    <div class=\"neon-card\">\n\n      <!-- Total de VMs -->\n      <div class=\"metric\">\n        <div class=\"icon\">🖥️</div>\n        <div class=\"info\">\n          <div class=\"label\">Total de VMs</div>\n          <div class=\"value\">${formatNumber(totalVMs)}</div>\n        </div>\n        ${createCircle(totalVMs, '#2979ff')}\n      </div>\n\n      <!-- Total desligadas -->\n      <div class=\"metric\">\n        <div class=\"icon\">❌</div>\n        <div class=\"info\">\n          <div class=\"label\">Total Power Off</div>\n          <div class=\"value\">${formatNumber(totalPowerOff)}</div>\n        </div>\n        ${createCircle(totalPowerOff, '#e53935')}\n      </div>\n\n      <!-- Total ligadas -->\n      <div class=\"metric\">\n        <div class=\"icon\">✅</div>\n        <div class=\"info\">\n          <div class=\"label\">Total Power On</div>\n          <div class=\"value\">${formatNumber(totalPowerOn)}</div>\n        </div>\n        ${createCircle(totalPowerOn, '#43a047')}\n      </div>\n\n      <!-- Data e hora da última atualização do painel -->\n      <div class=\"footer\">Atualizado em ${new Date().toLocaleTimeString('pt-BR', { hour12: false })}</div>\n    </div>\n  `;\n})();\n\n ",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.2.1",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "host": {
            "filter": "DESKTOP-U9AF8T2"
          },
          "item": {
            "filter": "Host name of Zabbix agent running"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          },
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "DESKTOP-U9AF8T2"
          },
          "item": {
            "filter": "Total Power Off"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "B",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "DESKTOP-U9AF8T2"
          },
          "item": {
            "filter": "Total Power On"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "C",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Hypervisors"
          },
          "hide": false,
          "host": {
            "filter": "DESKTOP-U9AF8T2"
          },
          "item": {
            "filter": "Total de VMs"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "D",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "${DS_ZABBIX}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 9,
        "w": 20,
        "x": 4,
        "y": 10
      },
      "id": 3,
      "options": {
        "SVGBaseFix": true,
        "add100Percentage": true,
        "calcsMutation": "standard",
        "centerAlignContent": true,
        "codeData": "{\n  \"text\": \"Random text\"\n}",
        "css": "",
        "dynamicData": false,
        "dynamicFieldDisplayValues": false,
        "dynamicHtmlGraphics": false,
        "dynamicProps": false,
        "html": "",
        "onInit": "",
        "onInitOnResize": false,
        "onRender": "/********************************************************************************************\n * Curso: https://go.hotmart.com/C92709578Y?dp=1\n * Script de Memoria - Painel Grafana Customizado\n * Autor: Magno M Cerqueira\n * Data: 2025-07-14\n * Descrição:\n *   Painel que exibe Totla Memoria, memoria utilizada e ainda tem algumas firulas das VMS do \n * Hypervisor VMware Workstation Pro V17\n ********************************************************************************************/\n(() => {\n  // Verifica se os dados estão disponíveis e válidos antes de continuar\n  if (!htmlNode || !data || !data.series || data.series.length === 0) return;\n\n  // Função para extrair o nome do host a partir do nome da série\n  const extractHostFromName = name => {\n    const parts = name.split(':');\n    return parts.length > 1 ? parts[0].trim() : 'unknown';\n  };\n\n  // Agrupa todas as séries por nome do host\n  const groupByHost = () => {\n    const hosts = {};\n    for (const series of data.series) {\n      const host = extractHostFromName(series.name || '');\n      if (!hosts[host]) hosts[host] = [];\n      hosts[host].push(series);\n    }\n    return hosts;\n  };\n\n  // Retorna o último valor de uma métrica específica para um host\n  const getLastValue = (seriesList, metricName, fieldType = 'number') => {\n    const normalize = str => str.toLowerCase().replace(/[\\s\\-.:]/g, '');\n    const normalized = normalize(metricName);\n    for (const series of seriesList) {\n      const seriesName = normalize(series.name || '');\n      if (seriesName.includes(normalized)) {\n        const field = series.fields.find(f => f.type === fieldType);\n        if (field && field.values.length > 0) {\n          return field.values.get(field.values.length - 1);\n        }\n      }\n    }\n    return null;\n  };\n\n  // Formata porcentagens com duas casas decimais\n  const formatPct = val => `${parseFloat(val).toFixed(2)} %`;\n\n  // Converte bytes para GB arredondando\n  const formatGB = val => `${Math.round(val / 1024 ** 3)} GB`;\n\n  // Define a cor de barra com base no valor\n  const getColor = val => val > 80 ? '#f44336' : val > 60 ? '#ffeb3b' : '#00e676';\n\n  // Retorna classe de animação de alerta se o valor for alto\n  const getBlinkClass = val => val > 60 ? 'pulse' : '';\n\n  // Converte uptime (em segundos) para dias, horas e minutos\n  const formatUptime = seconds => {\n    if (!seconds || isNaN(seconds)) return '-';\n    const d = Math.floor(seconds / (3600 * 24));\n    const h = Math.floor((seconds % (3600 * 24)) / 3600);\n    const m = Math.floor((seconds % 3600) / 60);\n    return `${d}d ${h}h ${m}m`;\n  };\n\n  // Garante que o valor percentual fique entre 0 e 100\n  const safePercent = val => {\n    const num = parseFloat(val);\n    if (isNaN(num)) return 0;\n    return Math.min(Math.max(num, 0), 100);\n  };\n\n  // Agrupa os dados dos hosts\n  const hostsData = groupByHost();\n  let rowsHtml = '';\n\n  // Itera por cada host e gera a linha de dados correspondente\n  for (const [host, seriesList] of Object.entries(hostsData)) {\n    const systemName = getLastValue(seriesList, 'Host name', 'string') ?? host;\n    const cpuRaw = getLastValue(seriesList, 'CPU utilization') ?? 0;\n    const memoryRaw = getLastValue(seriesList, 'Memory utilization') ?? 0;\n    const memoryTotal = getLastValue(seriesList, 'Total memory') ?? 1;\n    const cores = getLastValue(seriesList, 'Number of CPUs') ?? '-';\n    const statusRaw = getLastValue(seriesList, 'Status') ?? 0;\n    const uptimeRaw = getLastValue(seriesList, 'System uptime') ?? 0;\n\n    // Formata os valores e define status e estilo\n    const cpu = safePercent(cpuRaw);\n    const memoryPct = safePercent(memoryRaw);\n    const uptimeText = formatUptime(uptimeRaw);\n    const isStopped = statusRaw === 1;\n    const statusText = isStopped ? 'Stopped' : 'Running';\n    const statusColorClass = isStopped ? 'status-stopped' : 'status-online';\n    const isBlinking = cpu > 60 || memoryPct > 60;\n\n    // Cria o HTML da linha do host\n    rowsHtml += `\n      <div class=\"card-row ${isBlinking ? 'pulse' : ''}\">\n        <div><div class=\"value\">${systemName}</div></div>\n        <div><div class=\"value ${statusColorClass}\">${statusText}</div></div>\n        <div><div class=\"value\">${cores}</div></div>\n        <div>\n          <div class=\"value\">${formatPct(cpu)}</div>\n          <div class=\"bar-container\">\n            <div class=\"bar ${getBlinkClass(cpu)}\" style=\"width:${cpu.toFixed(0)}%; background-color: ${getColor(cpu)};\"></div>\n          </div>\n        </div>\n        <div><div class=\"value\">${formatGB(memoryTotal)}</div></div>\n        <div>\n          <div class=\"value\">${formatPct(memoryPct)}</div>\n          <div class=\"bar-container\">\n            <div class=\"bar ${getBlinkClass(memoryPct)}\" style=\"width:${memoryPct.toFixed(0)}%; background-color: ${getColor(memoryPct)};\"></div>\n          </div>\n        </div>\n        <div><div class=\"value\">${uptimeText}</div></div>\n      </div>\n    `;\n  }\n\n  // Define o HTML e o CSS final do painel\n  htmlNode.innerHTML = `\n    <style>\n      html, body, .panel-container {\n        overflow: hidden !important;\n      }\n\n      .card-wrapper {\n        font-family: \"Inter\", sans-serif;\n        background-color: #15171c;\n        color: #fff;\n        border-radius: 6px;\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n        display: flex;\n        flex-direction: column;\n      }\n\n      .card-header {\n        display: grid;\n        grid-template-columns: repeat(7, 1fr);\n        background: #1d1f24;\n        color: #aaa;\n        font-weight: 600;\n        font-size: 13px;\n        text-transform: uppercase;\n        padding: 12px 0;\n        text-align: center;\n        position: sticky;\n        top: 0;\n        z-index: 999;\n      }\n\n      .card-body {\n        overflow-y: auto;\n        flex: 1;\n      }\n\n      .card-row {\n        display: grid;\n        grid-template-columns: repeat(7, 1fr);\n        padding: 14px 0;\n        text-align: center;\n        align-items: center;\n        border-top: 1px solid #2a2a2a;\n        background: #15171c;\n      }\n\n      .value {\n        font-weight: 500;\n        font-size: 13px;\n        margin-bottom: 4px;\n        color: #f0f0f0;\n      }\n\n      .status-online {\n        color: #00e676;\n        font-weight: bold;\n      }\n\n      .status-stopped {\n        color: #f44336;\n        font-weight: bold;\n      }\n\n      .bar-container {\n        background: #3a3a3a;\n        border-radius: 6px;\n        height: 8px;\n        width: 75%;\n        margin: 0 auto;\n        overflow: hidden;\n      }\n\n      .bar {\n        height: 100%;\n        border-radius: 6px;\n        transition: width 0.4s ease;\n      }\n\n      .pulse {\n        animation: blink 1s infinite;\n      }\n\n      @keyframes blink {\n        0%, 100% { background-color: #15171c; }\n        50% { background-color: #2a2a2a; }\n      }\n\n      .bar.pulse {\n        animation: blinkBorder 1s infinite;\n      }\n\n      @keyframes blinkBorder {\n        0%, 100% { opacity: 1; }\n        50% { opacity: 0.7; }\n      }\n    </style>\n\n    <div class=\"card-wrapper\">\n      <div class=\"card-header\">\n        <div>NODE</div>\n        <div>STATUS</div>\n        <div>CORES</div>\n        <div>CPU (%)</div>\n        <div>TOTAL MEM</div>\n        <div>MEMORY (%)</div>\n        <div>UPTIME</div>\n      </div>\n      <div class=\"card-body\">\n        ${rowsHtml}\n      </div>\n    </div>\n  `;\n})();\n\n",
        "overflow": "visible",
        "panelupdateOnMount": true,
        "reduceOptions": {
          "calcs": [
            "lastNotNull",
            "last",
            "firstNotNull",
            "first",
            "min",
            "max",
            "mean",
            "sum",
            "count",
            "range",
            "delta",
            "step",
            "diff",
            "logmin",
            "allIsZero",
            "allIsNull",
            "diffperc"
          ]
        },
        "renderOnMount": true,
        "rootCSS": "",
        "useGrafanaScrollbar": true
      },
      "pluginVersion": "2.2.1",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Discovered hosts"
          },
          "host": {
            "filter": "/.*/"
          },
          "item": {
            "filter": "/Host name/"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "2",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          },
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Discovered hosts"
          },
          "hide": false,
          "host": {
            "filter": "/.*/"
          },
          "item": {
            "filter": "/CPU Utilization/"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "B",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Discovered hosts"
          },
          "hide": false,
          "host": {
            "filter": "/.*/"
          },
          "item": {
            "filter": "/Memory utilization/"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "C",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Discovered hosts"
          },
          "hide": false,
          "host": {
            "filter": "/.*/"
          },
          "item": {
            "filter": "/Total memory/"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "D",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Discovered hosts"
          },
          "hide": false,
          "host": {
            "filter": "/.*/"
          },
          "item": {
            "filter": "/Number of CPUs/"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "E",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Discovered hosts"
          },
          "hide": false,
          "host": {
            "filter": "/.*/"
          },
          "item": {
            "filter": "/System uptime/"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "F",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        },
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "${DS_ZABBIX}"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "Discovered hosts"
          },
          "hide": false,
          "host": {
            "filter": "/.*/"
          },
          "item": {
            "filter": "/Status/"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "G",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "gapit-htmlgraphics-panel"
    }
  ],
  "refresh": "30s",
  "schemaVersion": 41,
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-24h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "browser",
  "title": "Dashboard VMware Workstation Pro V17 - V1",
  "uid": "b97e686e-2946-452c-9d14-61265812b28a",
  "version": 51,
  "weekStart": ""
}